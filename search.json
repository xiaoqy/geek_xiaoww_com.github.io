[{"title":"BBR一键安装脚本 BBR魔改暴力BBRplus锐速(Lotsever)","url":"/bbr-install-script-bbrplus-lotsever/","content":"前言BBR 是 Google 提出的一种新型拥塞控制算法，可以使 Linux 服务器显著地提高吞吐量和减少 TCP 连接的延迟。BBR解决了两个问题：\n\n再有一定丢包率的网络链路上充分利用带宽。非常适合高延迟，高带宽的网络链路。\n降低网络链路上的buffer占用率，从而降低延迟。非常适合慢速接入网络的用户。\n\n本次测试服务器是HostMem的洛杉矶动态云：https://www.hostmem.com/?ref=zeruns\nspeedtest测速服务搭建yum install dockersystemctl start dockersystemctl enable dockerdocker pull adolfintel/speedtestdocker run -d -p 80:80 adolfintel/speedtestsystemctl stop firewalld.servicesystemctl disable firewalld.service\n\n输入上面命令安装speedtest测速服务后在浏览器地址栏输入你服务器的IP即可打开测速页面\nBBR和锐速安装脚本wget -N --no-check-certificate &quot;https://gist.github.com/zeruns/a0ec603f20d1b86de6a774a8ba27588f/raw/4f9957ae23f5efb2bb7c57a198ae2cffebfb1c56/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh\n\n\n\n测速结果裸机\n原版BBR\nBBR魔改版\nBBR Plus\n锐速总结HostMem的服务器如果不装BBR和锐速这类TCP加速程序带宽根本没法看，但装上后效果好很多，效果最好最稳当的是魔改版BBR。\n注：此测试结果不具备普遍性，不同线路不同厂商的服务器结果不同，其他厂商的服务器需要自己测试找出效果最好的。\n","categories":["系统运维"],"tags":["Linux"]},{"title":"Centos 7.6 源码编译安装 MariaDB 10.5.9","url":"/centos7-6-source-install-mariadb-10-5-9/","content":"\n 本文主要记录如何在 CentOS 7.6 中编译安装 MariaDB 官方最新的 10.5.9 版本。由于像 Nginx 、 Mysql 和 PHP 的的源码都是用 C/C++ 写的，所以自己的 CentOS 7.6 服务器上必须要安装 gcc 和 g++ 软件。\n 搭建 LNMP 环境一般是先安装 Mysql&#x2F;MariaDB ，再安装 Nginx ，其次是安装 PHP\n\n准备工作创建用户和组\n先创建一个名为 mysql 且没有登录权限的系统用户和一个名为 mysql 的系统用户组，然后安装 MariaDB 所需的依赖库和依赖包，最后通过 cmake 进行安装的详细配置。\n\n\n创建 mysql 系统用户和系统用户组\n\ngroupadd -r mysql &amp;&amp; useradd -c &quot;MariaDB Server&quot; -r -g mysql -s /sbin/nologin -d /usr/local/mariadb mysql -M\n\n\n\n创建数据库相关目录\n提前预定 MariaDB 的安装目录为 /usr/local/mariadb 并且数据目录为 /data/mariadb ，赋予 mysql  用户权限。\n\nmkdir -pv /data/mariadb &amp;&amp; chown -R mysql:mysql /data/mariadb\n\n\n\n删除数据库相关文件\n删除 CentOS 默认数据库配置文件\n\nfind -H /etc/ | grep my.c&gt; /etc/my.cnf.d&gt; /etc/my.cnf.d/mysql-clients.cnf&gt; /etc/pki/tls/certs/make-dummy-cert&gt; /etc/pki/tls/certs/renew-dummy-cert&gt; /etc/my.cnfrm -rf /etc/my.cnf /etc/my.cnf.d/\n\n\n卸载系统自带 mariadb-libs\n\nrpm -qa|grep mariadb*&gt; mariadb-libs-5.5.60-1.el7_5.x86_64rpm -e mariadb-libs-5.5.60-1.el7_5.x86_64 --nodeps\n\n\n\n安装相关包安装依赖库\nYum 安装 GCC 、 GCC-C++ 的 C/C++ 语言编译环境\n\nyum -y install gcc gcc-c++ make autoconf automake libtool\n\n\nYum 安装 MariaDB 必须的依赖库\n\nyum -y install openssl openssl-devel ncurses ncurses-devel bison bison-devel boost boost-devel jemalloc jemalloc-devel bzip2 bzip2-devel libxml2 libxml2-devel perl perl-devel lsof libaio-devel libcurl-devel libarchive-devel libevent-devel pcre-devel pcre2-devel zlib-devel kernel-headers kernel-devel zip tar m4 git gnutls-devel\n\n\n\n安装编译包\nCMake ：编译工具\n\n(备用：https://blog.xiaoqy.com/pub/packages/cmake/cmake-3.19.5.tar.gz)\nwget -P &#x27;/usr/local/src&#x27; https://cmake.org/files/v3.19/cmake-3.19.5.tar.gz \\&amp;&amp; cd /usr/local/src \\&amp;&amp; tar -zxvf cmake-3.19.5.tar.gz -C &#x27;/usr/local/src&#x27; \\&amp;&amp; cd cmake-3.19.5./bootstrapgmake &amp;&amp; gmake install\t# 或者 make &amp;&amp; make installcmake --version\n\n\n\n编译安装 MariaDB\n下载并解压文件\n\n（备用：https://blog.xiaoqy.com/pub/packages/mariadb/mariadb-10.5.9.tar.gz）\nwget -P &#x27;/usr/local/src&#x27; https://mirrors.tuna.tsinghua.edu.cn/mariadb/mariadb-10.5.9/source/mariadb-10.5.9.tar.gz \\&amp;&amp; cd /usr/local/src \\&amp;&amp; tar -zxvf mariadb-10.5.9.tar.gz -C &#x27;/usr/local/src&#x27; \\&amp;&amp; cd mariadb-10.5.9\n\n\n预编译\n\ncmake . \\-DCMAKE_INSTALL_PREFIX=/usr/local/mariadb \\-DMYSQL_UNIX_ADDR=/data/mariadb/mysql.sock \\-DSYSCONFDIR=/etc \\-DMYSQL_DATADIR=/data/mariadb \\-DMYSQL_USER=mysql \\-DMYSQL_TCP_PORT=3306 \\-DWITHOUT_TOKUDB=1 \\-DWITH_INNOBASE_STORAGE_ENGINE=1 \\-DWITH_ARCHIVE_STORAGE_ENGINE=1 \\-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \\-DWITH_PARTITION_STORAGE_ENGINE=1 \\-DWITH_DEBUG=0 \\-DWITH_READLINE=1 \\-DWITH_BOOST=system \\-DWITH_SSL=system \\-DWITH_ZLIB=system \\-DWITH_LIBWRAP=1 \\-DDEFAULT_CHARSET=utf8 \\-DDEFAULT_COLLATION=utf8_general_ci \\-DENABLED_LOCAL_INFILE=1\n\n[collapse title&#x3D;”CMake 编译报错？” color&#x3D;”red”]\n\nCMake 错误请删除 CMakeCache.txt 并重新执行。否则每次读取这个文件，命令修改正确也是报错\n\nrm -f CMakeCache.txt\n\n[&#x2F;collapse]\n\n编译并安装\n\nmake &amp;&amp; make install &amp;&amp; cd\n\n[collapse title&#x3D;”编译报错？” color&#x3D;”red”]\n\n报错：GCC 5.3 or newer is required (-dumpversion says 4.8.5)原因：GCC 版本低于安装软件要求的版本\n\n\nMariaDB 编译 TokuDB 引擎时会用到 C++11 标准，系统里 GCC 最高版本 4.8.5 是支持 C++11 标准的，可就算指定了 -DCMAKE_CXX_FLAGS=-std=c++11 也不行。手动编译更高版本的 GCC 又太麻烦，这里直接安装了 devtoolset-9 ，当然你禁用 TokuDB 引擎也无可厚非。\n\n\nDevtoolset-toolchain ：GCC 工具链\n\ngcc --version\t# 查询 GCC 版本&gt; gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-36)&gt; Copyright (C) 2015 Free Software Foundation, Inc.# 安装 SCL 源yum install -y centos-release-scl scl-utils-buildyum install -y devtoolset-9# 切换到 Devtoolset-9scl enable devtoolset-9 bashgcc --version\t# 版本达到 9 系列&gt; gcc (GCC) 9.3.1 20200408 (Red Hat 9.3.1-2)&gt; Copyright (C) 2019 Free Software Foundation, Inc.\n\n\n报错：c++: fatal error: Killed signal terminated program cc1plus原因：内存不足所致，可通过设置 2G 交换分区来解决该问题\n\nsudo dd if=/dev/zero of=/swapfile bs=64M count=32\t# 设置交换分区的大小sudo mkswap /swapfile\t# 创建交换分区文件sudo swapon /swapfile\t# 开启交换分区# 编译完成后，回收这部分临时的交换空间sudo swapoff /swapfile\t# 先关闭交换空间sudo rm /swapfile\t# 删除交换空间\n\n[&#x2F;collapse]\n配置 MariaDB# 使用 mysql 用户执行脚本, 安装数据库到数据库存放目录/usr/local/mariadb/scripts/mysql_install_db --user=mysql --datadir=/data/mariadb\n\n\n复制 MariaDB 配置文件到 /etc 目录\n\n# 拷贝 maria 安装目录下 support-files 目录下的文件 wsrep.cnf 到 /etc 目录并重命名为 my.cnfcp /usr/local/mariadb/support-files/wsrep.cnf /etc/my.cnf\n\n\n创建启动脚本\n\ncp /usr/local/mariadb/support-files/mysql.server /etc/rc.d/init.d/mysqld\n\n\n启动 mysqld 服务\n\n/etc/rc.d/init.d/mysqld start\n\n\n配置环境变量\n\n#　写入环境变量到 mysql.shecho -e &quot;export PATH=\\$PATH:/usr/local/mariadb/bin/&quot; &gt; /etc/profile.d/mysql.sh# 为脚本赋于可执行权限chmod 0777 /etc/profile.d/mysql.sh# 读取并执行 mysql.sh 脚本, 并执行脚本, 以立即生效环境变量source /etc/profile.d/mysql.sh\n\n\n初始化 MariaDB\n\n# 运行 MariaDB 初始化脚本mysql_secure_installation# 以下提示：    NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB          SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!    In order to log into MariaDB to secure it, we&#x27;ll need the current    password for the root user. If you&#x27;ve just installed MariaDB, and    haven&#x27;t set the root password yet, you should just press enter here.    Enter current password for root (enter for none):\t# 直接Enter，预设MariaDB没有密码    OK, successfully used password, moving on...    Setting the root password or using the unix_socket ensures that nobody    can log into the MariaDB root user without the proper authorisation.    You already have your root account protected, so you can safely answer &#x27;n&#x27;.    Switch to unix_socket authentication [Y/n] y\t# y，切换到unix_socket身份验证    Enabled successfully!    Reloading privilege tables..     ... Success!    You already have your root account protected, so you can safely answer &#x27;n&#x27;.    Change the root password? [Y/n] y\t# y，设定root密码    New password:     Re-enter new password:    Password updated successfully!    Reloading privilege tables..     ... Success!    By default, a MariaDB installation has an anonymous user, allowing anyone    to log into MariaDB without having to have a user account created for    them.  This is intended only for testing, and to make the installation    go a bit smoother.  You should remove them before moving into a    production environment.    Remove anonymous users? [Y/n] y\t# y，移除匿名登入     ... Success!    Normally, root should only be allowed to connect from &#x27;localhost&#x27;.  This    ensures that someone cannot guess at the root password from the network.    Disallow root login remotely? [Y/n] y\t# y，移除远端登入权限     ... Success!    By default, MariaDB comes with a database named &#x27;test&#x27; that anyone can    access.  This is also intended only for testing, and should be removed    before moving into a production environment.    Remove test database and access to it? [Y/n] y\t# y，移除测试资料库和账号     - Dropping test database...     ... Success!     - Removing privileges on test database...     ... Success!    Reloading the privilege tables will ensure that all changes made so far    will take effect immediately.    Reload privilege tables now? [Y/n] y\t# y，重新载入权限表     ... Success!    Cleaning up...    All done!  If you&#x27;ve completed all of the above steps, your MariaDB    installation should now be secure.    Thanks for using MariaDB!\n\n\n设置 MariaDB 为自启动并启动服务\n\nsystemctl enable mysqld.service &amp;&amp; systemctl start mysqld.service\n\n\n查询 MariaDB 状态\n\nsystemctl status mysqld.service# 或者ps -ef | grep mysqldnetstat -anp | grep mysqld","categories":["系统运维"],"tags":["Linux","Centos","MariaDB"]},{"title":"Centos 7.6 源码编译安装 GCC 10.3.0","url":"/centos7-6-source-install-gcc-10-3-0/","content":"\nCentos7.6 Yum 安装的默认 GCC 版本为 4.8.5 ，如果需要使用 GCC 的最新特性，则需要源码安装 GCC 最新版。编译过程中解决不少报错，最终有了本文的实测成功记录。\n\n安装环境\n系统：CentOS 7.6.1810\n软件：GCC 10.3.0\n依赖软件：gmp 、 mpfr 、 libmpc\n\n安装说明\nC++17 ：GCC7完全支持， GCC6 和 GCC5 部分支持， GCC6 支持度当然比 GCC5 高， GCC4 及以下版本不支持。C++14 ：GCC5 就可以完全支持， GCC4 部分支持， GCC3 及以下版本不支持。C++11 ：GCC4.8.1 及以上可以完全支持。 GCC4.3 部分支持， GCC4.3 以下版本不支持。高版本的 GCC 向下兼容，支持低版本的 C++ 标准。现在很多服务器 Yum 里的 GCC 版本是 4.8.5 ，也就是可以完全支持 C++11 了，部分支持 C++14 ，不支持 C++17 。\n\n安装相关包安装依赖库\nYum 安装 GCC 、 GCC-C++ 的 C/C++ 语言编译环境以及所需的依赖库\n\n\n预先安装旧版 GCC 以及编译时所需的依赖库，最后工作在进行卸载\n\n# 安装EPEL源yum install -y epel-release# 安装工具yum install -y vim wget gcc gcc-c++ make autoconf automake zip bzip2# 安装基础编译软件yum install -y gcc-gnat libgcc libgcc.i686 glibc-devel bison flex m4 texinfo build-essential\n\n\n\n准备相关 GCC\n编译过程是非常耗时的（本机耗时 6 小时完成编译），因此如果读者选用此方式安装 GCC ，则在执行 make 命令时一定要安排合适的时间。\n\n下载并解压wget -P &#x27;/usr/local/src&#x27; https://ftp.gnu.org/gnu/gcc/gcc-10.3.0/gcc-10.3.0.tar.gz \\&amp;&amp; cd /usr/local/src \\&amp;&amp; tar -zxvf gcc-10.3.0.tar.gz -C &#x27;/usr/local/src&#x27; \\&amp;&amp; cd gcc-10.3.0\n\n\n\n加入依赖库环境变量echo &#x27;export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib:/usr/lib64:/usr/local/lib:/usr/local/lib64&#x27; &gt;&gt; /etc/profile\n\n\n使环境变量立即生效\n\nsource /etc/profile\n\n\n\n添加动态链接库vim /etc/ld.so.conf\n\n添加以下内容\ninclude ld.so.conf.d/*.conf/usr/lib/usr/lib64/usr/local/lib/usr/local/lib64\n\n重新搜索当前系统上所有库文件搜索路径下的库文件，并生成缓存\nldconfig -v\n\n\n\n安装依赖包\n检查和下载 GCC 依赖环境\n\n# 下载安装 GCC 所需要的依赖包（如 gmp、mpfr、mpc 等）# 一定观察此命令的执行结果，保证其确实是将 gmp、mpfr、mpc 等依赖包成功下载下来。./contrib/download_prerequisites&gt; gmp-6.1.0.tar.bz2: OK&gt; mpfr-3.1.4.tar.bz2: OK&gt; mpc-1.0.3.tar.gz: OK&gt; isl-0.18.tar.bz2: OK&gt; All prerequisites downloaded successfully.\n\n[collapse title&#x3D;”下载失败？” color&#x3D;”red”]\n\nGCC 依赖环境通过脚本无法下载或者下载慢，则可以使用国内GNU镜像站进行下载。\n\n\n手动下载 GCC 依赖包（方法1）\n\ncd /usr/local/src/gcc-10.3.0wget -P &#x27;/usr/local/src/gcc-10.3.0&#x27; https://gcc.gnu.org/pub/gcc/infrastructure/gmp-6.1.0.tar.bz2 \\&amp;&amp; wget -P &#x27;/usr/local/src/gcc-10.3.0&#x27; https://gcc.gnu.org/pub/gcc/infrastructure/mpfr-3.1.4.tar.bz2 \\&amp;&amp; wget -P &#x27;/usr/local/src/gcc-10.3.0&#x27; https://gcc.gnu.org/pub/gcc/infrastructure/mpc-1.0.3.tar.gz \\&amp;&amp; wget -P &#x27;/usr/local/src/gcc-10.3.0&#x27; https://gcc.gnu.org/pub/gcc/infrastructure/isl-0.18.tar.bz2tar -jxvf gmp-6.1.0.tar.bz2 -C &#x27;/usr/local/src/gcc-10.3.0&#x27; \\&amp;&amp; tar -jxvf mpfr-3.1.4.tar.bz2 -C &#x27;/usr/local/src/gcc-10.3.0&#x27; \\&amp;&amp; tar -zxvf mpc-1.0.3.tar.gz -C &#x27;/usr/local/src/gcc-10.3.0&#x27; \\&amp;&amp; tar -jxvf isl-0.18.tar.bz2 -C &#x27;/usr/local/src/gcc-10.3.0&#x27;\n\nYum安装  GCC 依赖库（方法2）\n\nyum install gmp gmp-devel mpfr mpfr-devel libmpc libmpc-devel\n\n[&#x2F;collapse]\n\n编译安装依赖包（可忽略）\n\ncd /usr/local/src/gcc-10.3.0/gmp-6.1.0./configure --prefix=/usr/local/gmp-6.1.0make &amp;&amp; make installcd /usr/local/src/gcc-10.3.0/mpfr-3.1.4./configure --prefix=/usr/local/mpfr-3.1.4 --with-gmp=/usr/local/gmp-6.1.0make &amp;&amp; make installcd /usr/local/src/gcc-10.3.0/mpc-1.0.3./configure --prefix=/usr/local/mpc-1.0.3 --with-gmp=/usr/local/gmp-6.1.0 --with-mpfr=/usr/local/mpfr-3.1.4make &amp;&amp; make installcd /usr/local/src/gcc-10.3.0/isl-0.18./configure --prefix=/usr/local/isl-0.18  --with-gmp=/usr/local/gmp-6.1.0make &amp;&amp; make install\n\n\n\n编译安装 GCCcd /usr/local/src/gcc-10.3.0 \\&amp;&amp; mkdir build &amp;&amp; cd build \\&amp;&amp; ../configure --enable-threads=posix --enable--long-long --enable-languages=c,c++ --disable-checking --disable-multilib# 如果GCC依赖包已经进行了上一步编译操作，则执行以下命令:../configure --prefix=/usr/local/gcc-10.3.0 --with-gmp=/usr/local/gmp-6.1.0 --with-mpfr=/usr/local/mpfr-3.1.4 --with-mpc=/usr/local/mpc-1.0.3 --with-isl=/usr/local/isl-0.18 --enable-threads=posix --enable--long-long --enable-languages=c,c++ --disable-checking --disable-multilib\t--enable-threads=posix\t使c++异常能处理多线程代码\t--enable--long-long\t设定gcc数据类型大小\t–-enable-languages\t表示你要让你的gcc支持那些语言\t–-disable-checking\t生成的编译器在编译过程中不做额外检查，也可以使用 *–enable-checking=xxx*\t来增加一些检查\t–-disable-multilib\t不生成编译为其他平台可执行代码的交叉编译器。# 整个编译过程，根据你的机器配置，可能要等十几分钟到一个小时不等；# 4为当前服务器每颗物理CPU中的核心数，以实际为准。make -j 4yum -y remove gcc gcc-c++\t# 安装前卸载原来的GCCmake install# 由此就成功安装了 10.3.0 版本的 GCC 编译器。需要注意的是，如果此时读者直接执行 gcc --version，则 GCC 版本仍会显示之前安装的版本。操作系统重启之后，GCC 版本就会自行更正过来。\n\n[collapse title&#x3D;”编译报错？” color&#x3D;”red”]\n\n报错： configure: error: I suspect your system does not have 32-bit development libraries (libc and headers). If you have them, rerun configure with --enable-multilib. If you do not have them, and want to build a 64-bit-only compiler, rerun configure with --disable-multilib.\n原因：根据错误提示，我们给 configure 命令加上 --disable-multilib 参数再次执行（这样其实也就不再生产 32 位的编译器了）。\n\n./configure --disable-multilib\n\n\n报错： cc: error trying to exec &#39;cc1obj&#39;: execvp: No such file or directory\n\nyum install gcc-objc gcc-objc++ libobjc\n\n[&#x2F;collapse]\n\n配置环境变量\n\necho &#x27;export PATH=/usr/local/gcc-10.3.0/bin:$PATH&#x27; &gt;&gt; /etc/profileexit\t# 执行后需要重启终端窗口\n\n\n检查GCC版本\n\n\n重新登录后检查当前 GCC 版本\n\ngcc -v\n\n","categories":["系统运维"],"tags":["Linux","Centos","GCC"]},{"title":"Centos 7.6 源码编译安装 Nginx 1.19.10","url":"/centos7-6-source-install-nginx-1-19-10/","content":"\n 本文主要记录如何在 CentOS 7.6 中编译安装 Nginx 官方最新的 1.19.10 版本。由于像 Nginx 、 Mysql 和 PHP 的的源码都是用 C/C++ 写的，所以自己的 CentOS 7.6 服务器上必须要安装 gcc 和 g++ 软件。\n 搭建 LNMP 环境一般是先安装 Mysql&#x2F;MariaDB ，再安装 Nginx ，其次是安装 PHP\n\n准备工作创建用户和组\n先创建一个名为 nginx 且没有登录权限的系统用户和一个名为 nginx 的系统用户组，然后安装 nginx 所需的依赖库和依赖包，最后通过 .configure 进行安装的详细配置。\n\n\n创建 nginx 系统用户和系统用户组\n\ngroupadd -r nginx &amp;&amp; useradd -c &quot;Nginx Server&quot; -r -g nginx -s /sbin/nologin -d /usr/local/nginx nginx -M\n\n\n\n创建相关目录# 创建缓存目录和日志目录mkdir -pv /var/cache/nginx/&#123;client_temp,proxy_temp,fastcgi_temp,uwsgi_temp,scgi_temp&#125; /var/log/nginx# 赋予nginx用户权限chown -R nginx:nginx /var/cache/nginx /var/log/nginx\n\n\n\n安装相关包安装依赖库\nYum 安装 GCC 、 GCC-C++ 、 C/C++ 语言编译环境\n\nyum -y install gcc gcc-c++ make autoconf automake\n\n\nYum 安装 Nginx 必须的依赖库\n\nyum -y install zlib zlib-devel openssl openssl-devel pcre-devel libxslt-devel libxml2 libxml2-devel gd-devel geoip-devel perl-devel perl-ExtUtils-Embed libuuid-devel\n\n\n\n编译安装 Nginx\n下载并解压文件\n\n（备用：https://blog.xiaoqy.com/pub/packages/nginx/nginx-1.19.10.tar.gz）\nwget -P &#x27;/usr/local/src&#x27; http://nginx.org/download/nginx-1.19.10.tar.gz \\&amp;&amp; cd /usr/local/src \\&amp;&amp; tar -zxvf nginx-1.19.10.tar.gz -C &#x27;/usr/local/src&#x27; \\&amp;&amp; cd nginx-1.19.10\n\n\n预编译\n\n./configure \\--prefix=/usr/local/nginx \\--user=nginx \\--group=nginx \\--sbin-path=/usr/sbin/nginx \\--conf-path=/etc/nginx/nginx.conf \\--error-log-path=/var/log/nginx/error.log \\--http-log-path=/var/log/nginx/access.log \\--pid-path=/var/run/nginx.pid  \\--lock-path=/var/run/nginx.lock \\--http-client-body-temp-path=/var/cache/nginx/client_temp \\--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\--http-scgi-temp-path=/var/cache/nginx/scgi_temp \\--with-http_ssl_module \\--with-http_v2_module \\--with-http_realip_module \\--with-http_addition_module \\--with-http_sub_module \\--with-http_dav_module \\--with-http_flv_module \\--with-http_mp4_module \\--with-http_gunzip_module \\--with-http_gzip_static_module \\--with-http_perl_module \\--with-http_random_index_module \\--with-http_secure_link_module \\--with-http_stub_status_module \\--with-http_auth_request_module \\--with-http_image_filter_module \\--with-http_slice_module \\--with-pcre \\--with-pcre-jit \\--with-debug \\--with-mail \\--with-mail_ssl_module \\--with-stream \\--with-stream_ssl_module \\--with-threads \\--with-file-aio\n\n\n编译并安装\n\nmake &amp;&amp; make install\n\n\n\n配置 Nginx\n备份 nginx.conf 配置源文件\n\ncp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.old\n\n\n修改文件 nginx.conf ，设置 user 参数如下： user nginx;\n\nsed -i &#x27;s/^#user\\s\\+nobody;$/user\\ nginx;/g&#x27; /etc/nginx/nginx.conf\n\n\n设置 Nginx 为系统服务\n\nvim /usr/lib/systemd/system/nginx.service\n\n添加以下内容：\n[Unit]Description=Nginx Web ServerAfter=network.target[Service]Type=forkingExecStart=/usr/sbin/nginx -c /etc/nginx/nginx.confExecReload=/usr/sbin/nginx -s reloadExecStop=/usr/sbin/nginx -s quitPrivateTmp=true[Install]WantedBy=multi-user.target\n\n\n设置 Nginx 为自启动并启动服务\n\nsystemctl enable nginx.service &amp;&amp; systemctl start nginx.service\n\n\n查询 Nginx 状态\n\nsystemctl status nginx.service# 或者ps -ef | grep nginxnetstat -anp | grep nginx\n\n\n修改 nginx 配置文件\n\nvim /usr/local/nginx/conf/nginx.conf\n\n修改内容如下：\n# 运行用户user  nginx;# 启动进程, 通常设置成和cpu的数据相等worker_processes  1;# 全局错误日志及PID文件#error_log  logs/error.log;#error_log  logs/error.log  notice;#error_log  logs/error.log  info;#pid        logs/nginx.pid;# 工作模式及连接数上限events &#123;    use epoll;    worker_connections  1024;&#125;http &#123;    include       mime.types;    default_type  application/octet-stream;    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;    access_log  logs/access.log  main;    sendfile        on;    #tcp_nopush     on;    #keepalive_timeout  0;    keepalive_timeout  65;    tcp_nodelay     on;    gzip  on;    gzip_disable &quot;MSIE [1-6]&quot;;    client_header_buffer_size   128k;    large_client_header_buffers  4 128k;    server &#123;        listen       80;        server_name  www.xiaoqy.com;        #charset koi8-r;        access_log  logs/nginx.dev.access.log  main;        location / &#123;            root   /data/www/html;            index  index.php index.html index.htm;        &#125;        #error_page  404              /404.html;        # redirect server error pages to the static page /50x.html        #        error_page   500 502 503 504  /50x.html;        location = /50x.html &#123;            root   /data/www/html;        &#125;    location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123;        expires 30d;    &#125;        # proxy the PHP scripts to Apache listening on 127.0.0.1:80        #        #location ~ \\.php$ &#123;        #    proxy_pass   http://127.0.0.1;        #&#125;        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000        #        location ~ \\.php$ &#123;        #    root           html;            fastcgi_pass   127.0.0.1:9000;            fastcgi_index  index.php;            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;            include        fastcgi_params;        &#125;        # deny access to .htaccess files, if Apache&#x27;s document root        # concurs with nginx&#x27;s one        #        location ~ /\\.ht &#123;            deny  all;        &#125;    &#125;    # another virtual host using mix of IP-, name-, and port-based configuration    #    #server &#123;    #    listen       8000;    #    listen       somename:8080;    #    server_name  somename  alias  another.alias;    #    location / &#123;    #        root   html;    #        index  index.html index.htm;    #    &#125;    #&#125;    # HTTPS server    #    #server &#123;    #    listen       443 ssl;    #    server_name  localhost;    #    ssl_certificate      cert.pem;    #    ssl_certificate_key  cert.key;    #    ssl_session_cache    shared:SSL:1m;    #    ssl_session_timeout  5m;    #    ssl_ciphers  HIGH:!aNULL:!MD5;    #    ssl_prefer_server_ciphers  on;    #    location / &#123;    #        root   html;    #        index  index.html index.htm;    #    &#125;    #&#125;&#125;\n\n\nCentOS 添加开放端口\n\n# 加入开放端口到配置文件firewall-cmd --zone=public --add-port=80/tcp --permanent    # 添加时区    --zone=public     # 添加端口    --add-port=80/tcp    # 永久生效    --permanent # 加载防火墙新配置文件( 以root身份输入以下命令，重新加载防火墙，并不中断用户连接，即不丢失状态信息. )firewall-cmd --reload\n\n","categories":["系统运维"],"tags":["Linux","Centos","Nginx"]},{"title":"CentOS 7.6 源码编译安装 PHP 8.0.3","url":"/centos7-6-source-install-php-8-0-3/","content":"\n本文主要记录如何在 CentOS 7.6 中编译安装 PHP 官方最新的 8.0.3 版本。由于像 Nginx 、 Mysql 和 PHP 的的源码都是用 C/C++ 写的，所以自己的 CentOS 7.6 服务器上必须要安装 gcc 和 g++ 软件。\n搭建 LNMP 环境一般是先安装 Mysql&#x2F;MariaDB ，再安装 Nginx ，其次是安装 PHP\n\n准备工作创建用户和组\n先先创建一个名为 php 且没有登录权限的用户和一个名为 php 的用户组，然后安装 php 所需的依赖库和依赖包，最后通过 .configure 进行安装的详细配置。\n\n\n创建 php 系统用户和系统用户组\n\ngroupadd -r php &amp;&amp; useradd -c &quot;PHP Server&quot; -r -g php -s /sbin/nologin -d /usr/local/php php -M\n\n\n\n安装相关包安装依赖库\n安装编译软件及依赖\n\nyum install -y gcc gcc-c++ make autoconf automake\n\n\n安装PHP常用的库依赖\n\nyum -y install oniguruma oniguruma-devel freetype freetype-devel libpng libpng-devel libjpeg libjpeg-devel libxml2 libxml2-devel libevent libevent-devel zlib zlib-devel curl curl-devel openldap-devel openldap-clients libicu-devel libicu-devel libtidy libtidy-devel sqlite-devel libcurl-devel libxslt-devel net-snmp-devel libedit-devel libxslt-devel bzip2-devel gd-devel php-ldap gmp-devel re2c\n\n\n\n链接LD库\n定义lib库\n\ncat &lt;&lt; EOF &gt; /etc/ld.so.confinclude ld.so.conf.d/*.conf/usr/lib/usr/lib64/usr/local/lib/usr/local/lib64EOF# 使环境变量立即生效ldconfig -v\n\n\n\n编译安装 PHP\n下载并解压文件\n\n(备用：https://blog.xiaoqy.com/pub/packages/php/php-8.0.3.tar.gz)\nwget -P &#x27;/usr/local/src&#x27; https://www.php.net/distributions/php-8.0.3.tar.gz \\&amp;&amp; cd /usr/local/src \\&amp;&amp; tar -zxvf php-8.0.3.tar.gz -C &#x27;/usr/local/src&#x27; \\&amp;&amp; cd php-8.0.3\n\n\n如果发现目录中并没有 configure 文件, 但是有一个名为 buildconf 的文件,通过运行这个文件生成 configure 文件\n\n# 运行 buildconf 文件, 生成 configure 文件，加入 --force 选项./buildconf --force\n\n\n预编译\n\n./configure \\--prefix=/usr/local/php \\--exec-prefix=/usr/local/php \\--bindir=/usr/local/php/bin \\--sbindir=/usr/local/php/sbin \\--includedir=/usr/local/php/include \\--libdir=/usr/local/php/lib/php \\--mandir=/usr/local/php/php/man \\--with-config-file-path=/usr/local/php/etc \\--with-mysql-sock=/var/run/mysql/mysql.sock \\--with-mysqli=shared,mysqlnd \\--with-pdo-mysql=shared,mysqlnd \\--with-openssl \\--with-snmp \\--with-mhash \\--with-zlib \\--with-zip \\--with-gettext \\--with-curl \\--with-pcre-jit \\--with-jpeg \\--with-freetype \\--with-gmp \\--with-fpm-user=nginx \\--with-fpm-group=nginx \\--with-pear \\--with-tidy \\--without-gdbm \\--enable-gd \\--enable-ftp \\--enable-xml \\--enable-pcntl \\--enable-shared \\--enable-sockets \\--enable-bcmath \\--enable-shmop \\--enable-sysvsem \\--enable-mbregex \\--enable-mbstring \\--enable-soap \\--enable-session \\--enable-opcache \\--enable-fpm \\--enable-fast-install \\--enable-calendar \\--enable-exif \\--enable-intl \\--disable-debug \\--disable-rpath \\--disable-fileinfo\n\n[collapse title&#x3D;”编译配置报错？” color&#x3D;”red”]\n\n报错：Alternatively, you may set the environment variables LIBZIP_CFLAGS and LIBZIP_LIBS to avoid the need to call pkg-config. See the pkg-config man page for more details.\n\n\n方式一（方便）\n\nyum -y install epel-releaserpm -ivh http://rpms.remirepo.net/enterprise/remi-release-7.rpmyum --enablerepo=remi install libzip5-devel\n\n\n方式二（知道咋回事）\n\n编译安装，指定 PKG_CONFIG_PATH ，上面报错中其实有提示信息，让我们考虑调整 PKG_CONFIG_PATH 环境变量。下面是详细步骤：\n# 先卸载已有yum remove -y libzip libzip-devel# 然后安装（备用：https://blog.xiaoqy.com/pub/packages/libzip/libzip-1.2.0.tar.gz）wget -P &#x27;/usr/local/src&#x27; https://libzip.org/download/libzip-1.2.0.tar.gz \\&amp;&amp; cd /usr/local/src \\&amp;&amp; tar -zxvf libzip-1.2.0.tar.gz -C &#x27;/usr/local/src&#x27; \\&amp;&amp; cd libzip-1.2.0./configuremake &amp;&amp; make install# 装完了之后找一下 /usr/local/lib 下有没有 pkgconfig 目录# 有的话执行以下命令来指定PKG_CONFIG_PATH。export PKG_CONFIG_PATH=&quot;/usr/local/lib/pkgconfig/&quot;\n\n[&#x2F;collapse]\n\n编译并安装\n\nmake &amp;&amp; make install\n\n[collapse title&#x3D;”编译报错？” color&#x3D;”red”]\n\n报错：configure: error:Please reinstall the iconv library\n原因：未安装 libiconv\n\n（备用：https://blog.xiaoqy.com/pub/packages/libiconv/libiconv-1.16.tar.gz）\nwget -P &#x27;/usr/local/src&#x27; https://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.16.tar.gz \\&amp;&amp; cd /usr/local/src \\&amp;&amp; tar -zxvf libiconv-1.16.tar.gz -C &#x27;/usr/local/src&#x27; \\&amp;&amp; cd libiconv-1.16./configure --prefix=/usr/local/libiconvmake &amp;&amp; make install# 然后编译时可加入选项 --with-iconv-dir=/usr/local/libiconv\n\n[&#x2F;collapse]\n配置 PHP\n添加 PHP 配置文件\n\n# 将 php 源码编译目录下的 php.ini-production 拷贝到 php 安装目录下的 etc 目录下cp php.ini-production /usr/local/php/etc/php.ini\n\n\n修改 PHP 配置文件\n\nvim /usr/local/php/etc/php.ini# 修改 PHP 扩展目录所在位置# 搜索 ;extension_dir = &quot;./&quot; 替换为extension_dir = &quot;/usr/local/php/lib/php/extensions/no-debug-non-zts-20200930&quot;# 开启 mysqli 扩展# 找到 ;extension_dir = &quot;ext&quot; 替换为extension = mysqli.soextension = pdo_mysql.so# 修改服务器所在时区# PRC 就是英文 People&#x27;s Republic of China，中华人民共和国# 找到 ;date.timezone = 替换为date.timezone = PRC# 开启 OPcache# 跳转到末行，输入以下内容zend_extension = opcache.so;# 保存并退出:wq!\n\n\n添加 php-fpm 管理相关的配置文件到系统配置目录 /etc/init.d\n\n# 将 php 源码编译目录下的 sapi/fpm/init.d.php-fpm 文件拷贝到系统配置 /etc/init.d 目录下并重命名为 php-fpmcp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpmcd ~\n\n\n添加 php-fpm 配置文件\n\n# 将 php 安装目录下的 /usr/local/php/etc/php-fpm.conf.default 文件拷贝同目录下并重命名为 php-fpm.confcp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf\n\n\n添加 www.conf 配置文件\n\n# 将 php 安装目录下的 /usr/local/php/etc/php-fpm.d/www.conf.default 文件拷贝同目录下并重命名为 www.confcp /usr/local/php/etc/php-fpm.d/www.conf.default /usr/local/php/etc/php-fpm.d/www.conf\n\n\n添加 PHP 安装目录到系统环境变量\n\n# 加入环境变量:echo -e &quot;export PATH=\\$PATH:/usr/local/php/bin:/usr/local/php/sbin&quot; &gt; /etc/profile.d/php.sh# 使用 source 立即生效刚刚添加的 php 环境变量source /etc/profile.d/php.sh\n\n\n设置 PHP 日志目录和 php-fpm 运行进程的 ID 文件目录\n\n\nphp-fpm`运行进程的 ID 文件也就是`php-fpm.sock\n\n其中设置 php-fpm 进程目录的用户和用户组为 Nginx\n\n# 创建 php-fpm 日志目录mkdir -p /var/log/php-fpm/# 创建 php-fpm 进程的 ID(php-fpm.sock) 文件运行目录mkdir -p /var/run/php-fpm# 修改 php-fpm 进程的 ID(php-fpm.sock) 文件运行目录的所属用户和组chown -R nginx:nginx /var/run/php-fpm/\n\n\n修改 session 的目录配置\n\n# 创建 session 存放目录mkdir -p /var/lib/php/session# 修改 session 存放目录的所属用户和组chown -R nginx:nginx /var/lib/php# 修改 PHP 配置文件下的 ;session.save_path = &quot;/tmp&quot;sed -i &#x27;s/^;session.save_path\\s\\+\\=\\s\\+\\&quot;\\/tmp\\&quot;/session.save_path\\ \\=\\ \\&quot;\\/var\\/lib\\/php\\/session\\&quot;/g&#x27; /usr/local/php/etc/php.ini\n\n\n设置 PHP 开机启动\n\n# 修改系统配置目录下的 php-fpm 文件可执行权限chmod +x /etc/init.d/php-fpm# 将系统配置目录下的 php-fpm 添加到 系统服务chkconfig --add php-fpm# 设置 php-fpm 系统服务 为开机启动chkconfig php-fpm on\n\n\n检测 php-fpm 系统服务是否启动成功\n\n# 用 chkconfig 命令检测一下服务是否运行成功chkconfig --list | grep php-fpm&gt; php-fpm         0:off   1:off   2:on    3:on    4:on    5:on    6:off# 可见服务已经在 第 2 到 第 5 运行等级打开# 同样你也可以禁用 php-fpm 开机启动chkconfig php-fpm off# 用 chkconfig 命令检测一下服务是否运行成功chkconfig --list | grep php-fpm&gt; php-fpm         0:off   1:off   2:off   3:off   4:off   5:off   6:off# 可见服务已经在 第 2 到 第 5 运行等级已经关闭\n\n\n测试 PHP 的配置文件是否无误\n\nphp-fpm -t\n\n\n启动 PHP 系统服务\n\n# 使用 systemctl start + 服务名 启动系统服务systemctl start php-fpm.service\n\n\n查看 PHP 系统服务状态\n\n# 使用 systemctl status + 服务名 查看系统服务状态systemctl status php-fpm.service\n\n\n查看 PHP 版本信息\n\nphp -v\n\n\n修改 Nginx 配置文件使之使用 Nginx 反向 PHP 解释器\n\n\n修改 Nginx 配置文件使之使用 Nginx 反向 PHP 解释器, 也就是 php-fpm 它其实就是 CGI\n\n# 说明一下我在安装的 nginx 是将配置文件放在 /etc/nginx 目录下# 修改配置文件如下:server &#123;    listen       80;    server_name  www.xiaoqy.com;    #charset koi8-r;    access_log  logs/nginx.dev.access.log  main;    location / &#123;        root   /data/www/html;        index  index.php index.html index.htm;    &#125;    #error_page  404              /404.html;    # redirect server error pages to the static page /50x.html    #    error_page   500 502 503 504  /50x.html;    location = /50x.html &#123;        root   /data/www/html;    &#125;    location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123;        expires 30d;    &#125;    # proxy the PHP scripts to Apache listening on 127.0.0.1:80    #    #location ~ \\.php$ &#123;    #    proxy_pass   http://127.0.0.1;    #&#125;    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000    #    location ~ \\.php$ &#123;    #    root           html;        fastcgi_pass   127.0.0.1:9000;        fastcgi_index  index.php;        fastcgi_param  SCRIPT_FILENAME  /data/www/html/$fastcgi_script_name;        include        fastcgi_params;    &#125;    # deny access to .htaccess files, if Apache&#x27;s document root    # concurs with nginx&#x27;s one    #    location ~ /\\.ht &#123;        deny  all;    &#125;&#125;\n\n\n编辑文件\n\nvim /data/www/html/index.php# 输入内容&lt;?phpphpinfo();# 保存退出:wq!\n\n\n重新加载  nginx  配置\n\nsystemctl reload nginx.service\n\n\n\n","categories":["系统运维"],"tags":["Linux","Centos","PHP"]},{"title":"CentOS7 配置阿里云 Yum 镜像源","url":"/centos7-aliyun-yum-repo-config/","content":"# 备份旧的 yum 源mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup# 下载阿里云 repowget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo# 清除缓存yum clean all# 生成缓存yum makecache\n\n","categories":["系统运维"],"tags":["Linux","Centos","Aliyun","AlibabaCloud"]},{"title":"Centos7编译安装LNMP","url":"/centos7-source-install-lnmp/","content":"安装前准备\n1.下载安装包\n2.解压，并用configure指定安装参数\nconfigure是一个shell脚本，根据平台的特殊生成Makefile文件\n3.执行make &amp;&amp; make install\nmake是用来编译的，它从Makefile中读取指令，然后编译\nmake install是用来安装的，它也从Makefile中读取命令\n\n\n这里选择的是Centos系统来进行安装。然后准备好nginx1.16、php7.3、mysql8的软件。在安装不同的工具软件的时候，需要安装插件的环境关系。检查系统版本：cat /etc/redhat-releaseGCC编译器，默认的云服务器都是会安装的查看是否已安装编译器：rpm -qa gcc否则(结果显示空白)安装编译器yum -y install gcc gcc-c++\n为什么要安装GCC编译器？GCC是C语言编译器使用它可以编译C语言代码为可执行程序\n\n\n1 安装Nginx1.1 安装Nginx依赖库Nginx的Rewrite模块和HTTP核心模块会使用到PCRE正则表达式语法：\nyum -y install pcre pcre-devel\n\nNginx的各种模块中需要使用GZIP压缩：\nyum -y install zlib zlib-devel\n\n安全套链字层密码库：\nyum -y install openssl openssl-devel\n\n1.2 下载Nginxwget http://nginx.org/download/nginx-1.18.0.tar.gz #或者下载好直接上传\n\n1.3  解压Nginxtar -zxvf nginx-1.18.0.tar.gz\n\n1.4 创建并设置Nginx运行账号groupadd nginxuseradd -M -g nginx -s /sbin/nologin nginx #手动创建一个用户，不想让用户登录系统  注：  -M:不要自动建立用户的登入目录  -s:是指定用户登入后所使用的shell。默认值为/bin/bash。如果不想让用户登录系统可以使用`-s /sbin/nologin`，此用户就不可以登录系统了。\n\n1.5 编译和安装Nginxcd nginx-1.18.0./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module --with-http_realip_modulemake &amp;&amp; make install\n\ncd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf\n修改文件nginx.conf，设置user参数如下：user nginx;\n1.6 设置Nginx为系统服务在目录/usr/lib/systemd/system/新建文件nginx.service，文件创建：touch nginx.service\n[Unit]Description=Nginx Web ServerAfter=network.target[Service]Type=forkingExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.confExecReload=/usr/local/nginx/sbin/nginx -s reloadExecStop=/usr/local/nginx/sbin/nginx -s quitPrivateTmp=true[Install]WantedBy=multi-user.target\n\n设置Nginx为开机自启动\nsystemctl enable nginx.service\n\n启动Nginx服务\nsystemctl start nginx.service\n\n查看Nginx是否启动成功：systemctl status nginx.service 或者 netstat -anp | grep nginx\n2 安装PHP2.1 安装依赖库yum -y install libxml2* openssl* libcurl* libjpeg* libpng* freetype* libmcrypt*\n\n2.2 解压PHPtar -zxvf php-7.3.6.tar.gz\n\n2.3 安装模块，编译安装cd php-7.3.6./configure --prefix=/usr/local/php --with-mysqli --with-pdo-mysql --with-iconv-dir --with-freetype-dir --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir --enable-simplexml --enable-xml --disable-rpath --enable-bcmath --enable-soap --enable-zip --with-curl --enable-fpm --with-fpm-user=nginx --with-fpm-group=nginx --enable-mbstring --enable-sockets --with-gd --with-openssl --with-mhash --enable-opcache --disable-fileinfo\n\n当安装PHP出现make:*** [ext/fileinfo/libmagic/apprentice.lo] Error 1的时候，是因为服务器内存不足1G。只需要在编译命令中添加 --disable-fileinfo即可\n\n如果报错：configure: error:Please reinstall the iconv library\n\n因为缺少:libiconvwget http://ftp.gnu.org/pub/libiconv/libiconv-1.14.tar.gztar -zxvf libiconv-1.14.tar.gz./configure --prefix=/usr/local/libiconvmake &amp;&amp; make install如果报错:make[2]: *** [progname.o] Error 1\t进入srclib目录，执行 sed -i -e &#x27;/gets is a security/d&#x27; ./stdio.in.h\n\n\n报错：configure: error:off_t undefined; check your library configuration\n\n未定义lib库，需要自己引入vim /etc/ld.so.conf#添加如下几行/usr/local/lib64/usr/local/lib/usr/lib/usr/lib64#保存退出:wqldconfig -v #立即生效\n\n\n如果报错：configure: error: Please reinstall the libzip distribution\n\n(1)移除旧的libzip:\tyum install -y cmake(2)安装libzip包:下载libzip包进行安装wget https://libzip.org/download/libzip-1.5.1.tar.gztar -zxvf libzip-1.5.1.tar.gz\tcd libzip-1.5.1\tmkdir build\tcd build\tcmake ..\tmake &amp;&amp; make install\n\n\n如果报错：CMake 3.0.2 or higher is required. You are running version 2.8.12.2\n\n(1)下载cmake包来安装wget https://cmake.org/files/v3.12/cmake-3.6.0.tar.gztar -zxvf cmake-3.6.0.tar.gz进入目录：然后 ./bootstrapmakemake install检查版本：cmake --version\n\n配置configure成功后，执行make安装make &amp;&amp; make install\n2.4 添加配置文件cd /usr/local/php/etccd php-fpm.conf.default php-fpm.confcd php-fpm.dcp www.conf.default www.conf\n\n2.5 创建用户groupadd wwwuseradd -M -g www -s /sbin/nologin wwwchown -R nginx:nginx /usr/local/php\n\n2.6 启动PHP/usr/local/php/sbin/php-fpm -c /usr/local/php/etc/php.ini -y /usr/local/php/etc/php-fpm.d/www.conf\n\n2.7 设置变量vim /etc/profile 在文件末尾加入两行代码PATH=$PATH:/usr/local/php/binexport PATH\n\n注意：如果添加多个用冒号连接，例如：\nPATH=$PATH:/usr/local/php/bin:/usr/local/xxx/bin\n\n保存文件，执行命令source &#x2F;etc&#x2F;profile 或者执行点命令 .&#x2F;profile 使其修改生效，执行完可通过echo $PATH命令查看是否添加成功\n2.8 打开nginx.conf配置nginx与php的连接使用listen 80;server_name localhost;root\t\thtml;location / &#123;\tindex\tindex.html index.htm index.php;&#125;location ~ \\.php$ &#123;\tfastcgi_pass\t127.0.0.1:9100;\tfastcgi_index\tindex.php;\tfastcgi_param\tSCRIPT_FILENAME $document_root$fastcgi_script_name;\tinclude\t\t\tfastcgi_params;&#125;\n\n重新加载Nginx：systemctl reload nginx然后在/test/web下面创建index.php并写入如下代码\n&lt;?php#echo phpinfo();var_dump(PHP_VERSION);\n\n3 安装Mysql8数据库3.1 检查依赖环境\n1.查看是否已安装mysql：rpm -qa mysql，有则卸载。2.安装编译mysql需要的依赖包：yum install libevent* libtool* autoconf* libstd* ncurse* bison* openssl*3.安装cmake(mysql5.5之后需要用cmake支持编译安装)查看是否已安装cmake：rpm -qa cmake没有则下载编译安装\n\n3.2 安装cmake(mysql5.5之后需要用cmake支持编译安装)cd /test/webwget https://cmake.org/files/v3.6/cmake-3.6.tar.gztar -xf cmake-3.6.tar.gzcd cmake-3.6.0./configuremakemake install\n\n3.3 上传mysql包并解压下载带有boost的mysql安装包wget http://cdn.mysql.com/Downloads/MySQL-8.0/mysql-8.0.16.tar.gztar -zxvf mysql-8.0.16.tar.gz\n\n3.4 编译安装mkdir /usr/local/mysqlmkdir /usr/local/mysql/datacd mysql-8.0.16cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/usr/local/mysql/data -DSYSCONFDIR=/etc -DMYSQL_TCP_PORT=3306 -DDOWNLOAD_BOOST=1 -DWITH_BOOST=/www/demo/mysql-8.0.16/boost -DFORCE_INSOURCE_BUILD=1报错：GCC 5.3 or newer is required (-dumpversion says 4.8.5)原因：gcc版本低于安装软件要求的版本查看GCC版本：gcc -vyum安装升级：1.安装scl源：yum install centos-release-scl scl-utils-build2.列出scl可用源：yum list all --enablerepo=&#x27;centos-sclo-rh&#x27; | grep &quot;devtoolset-&quot;3.安装8版本的gcc、gcc-c++、gdb工具链(toolchain):yum install -y devtoolset-8-toolchainscl enable devtoolset-8 bashgcc --version(当前窗口的版本达到8系列，重新打开一个窗口检查下版本)建立软链接；让你GCC生效环境变量：如果不行可以先删除/usr/bin/下面的gcc文件\tln -s /opt/rh/devtoolset-8/root/usr/bin/gcc /usr/bin/gcc\tln -s /opt/rh/devtoolset-8/root/usr/bin/c++ /usr/bin/c++\tln -s /opt/rh/devtoolset-8/root/usr/bin/g++ /usr/bin/g++\t\t\t报错：`c++: fatal error: Killed signal terminated program cc1plus`\t\t原因：内存不足所致，可通过设置2G交换分区来解决该问题\t\t1.设置交换分区的大小\t\tsudo dd if=/dev/zero of=/swapfile bs=64M count=32\t\t2.创建交换分区文件\t\tsudo mkswap /swapfile\t\t3.开启交换分区\t\tsudo swapon /swapfile\t\t此时你就可以重新编译你的文件了，当编译完成后，回收这部分临时的交换空间\t\t1.先关闭交换空间\t\tsudo swapoff /swapfile\t\t2.删除交换空间\t\tsudo rm /swapfile\n\nmake &amp;&amp; make install\n3.5 创建用户groupadd mysqluseradd -M -g mysql -s /sbin/nologin mysqlchown -R mysql:mysql /usr/local/mysql\n\n3.6 配置&#x2F;etc&#x2F;my.cnf文件[mysqld]server-id=1port=3306basedir=/usr/local/mysqldatadir=/usr/local/mysql/datasocket=/usr/local/mysql/mysql.sock[client]default-character-set=utf8socket=/usr/local/mysql/mysql.sock[mysql]default-character-set=utf8socket=/usr/local/mysql/mysql.sock\n\n3.7 修改目录权限chown -R mysql:mysql /usr/local/mysqlchmod 755 /usr/local/mysql -R\n\n3.8 初始化配置./bin/mysqld --initialize --user=mysql --datadir=/usr/local/mysql/databin/mysql_ssl_rsa_setup\n\n3.9 设置mysql为系统服务在目录/lib/systemd/system新建文件mysqltest.service，文件内容\n[Unit]Description=mysqldAfter=network.target[Service]Type=forkingExecStart=/usr/local/mysql/support-files/mysql.server startExecStop=/usr/local/mysql/support-files/mysql.server stopExecRestart=/usr/local/mysql/support-files/mysql.server restartExecReload=/usr/local/mysql/support-files/mysql.server reloadPrivateTmp=true[Install]WanteBy=multi-user.target\n\n3.10 启动mysql服务systemctl start mysqltest\n\n查看mysql是否启动成功：systemctl status mysqltest或者ps aux | grep mysqltest\n3.11 设置mysql的环境变量vim /etc/profile\n\n定义一个变量 MYSQL_HOME，值为&quot;mysql的安装路径&quot;在PATH后面加上$MYSQL_HOME/binexport后面加上MYSQL_HOME命令如下：MYSQL_HOME=/www/mysqlPATH=$PATH:$MYSQL_HOME/binexport PATH MYSQL_HOME重新载入配置source /etc/profile\n\n3.12 修改账号密码为了加强安全性，MySQL5.7以后为root用户随机生成了一个密码，在/var/log/mysqld.log中；若/var/log/mysqld.log找不到，现在/etc/my.cnf下的mysql中添加skip-grant-tables以无密码形式登陆mysql，重启mysql；切换到mysql数据库use mysql查看user表，会发现：user:当前数据库的用户名；authentication_string:用户密码；在mysql5.7.9以后废弃了password字段和password()函数；plugin:密码加密方式；\n1.如果当前root用户authentication_string字段下有内容，先将其设置为空；update user set authentication_string=&#x27;&#x27; where user=&#x27;root&#x27;;2.退出mysql，删除/etc/my.cnf文件最后的skip-grant-tables 重启mysql服务。3.在mysql/bin目录下登陆mysql./mysql -u root -ppassword:直接回车4.使用ALTER修改root用户密码(WITH mysql_native_password类型，用于native连接，这里设置的空密码)ALTER USER root@localhost IDENTIFIED WITH mysql_native_password BY &#x27;winner&#x27;;","categories":["系统运维"],"tags":["Linux","Centos"]},{"title":"Linux服务器安全配置(Centos7)","url":"/linux-server-security-config-centos7/","content":"1.建立其他用户useradd useridpasswd userid\n移动klarkzh到wheel分组后删除userid分组usermod -g wheel userid\n2.注释掉系统不需要的用户和用户组cp &#x2F;etc&#x2F;passwd &#x2F;etc&#x2F;passwdbak    #修改之前先备份vi &#x2F;etc&#x2F;passwd   #编辑用户，在前面加上#注释掉此行#adm:x:3:4:adm:/var/adm:/sbin/nologin#lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin#sync:x:5:0:sync:/sbin:/bin/sync#shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown#halt:x:7:0:halt:/sbin:/sbin/halt#uucp:x:10:14:uucp:/var/spool/uucp:/sbin/nologin#operator:x:11:0:operator:/root:/sbin/nologin#games:x:12:100:games:/usr/games:/sbin/nologin#gopher:x:13:30:gopher:/var/gopher:/sbin/nologin#ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin #注释掉ftp匿名账号\ncp &#x2F;etc&#x2F;group &#x2F;etc&#x2F;groupbak  #修改之前先备份vi &#x2F;etc&#x2F;group   #编辑用户组，在前面加上#注释掉此行#adm:x:4:root,adm,daemon#lp:x:7:daemon,lp#uucp:x:14:uucp#games:x:20:#dip:x:40:#news:x:9:13:news:/etc/news:\n3.关闭系统不需要的服务service acpid stop chkconfig acpid off #停止服务，取消开机启动 #电源进阶设定，常用在 Laptop 上service autofs stop chkconfig autofs off #停用自动挂载档桉系统与週边装置service bluetooth stop chkconfig bluetooth off #停用Bluetooth蓝芽service cpuspeed stop chkconfig cpuspeed off #停用控制CPU速度主要用来省电service cups stop chkconfig cups off #停用 Common UNIX Printing System 使系统支援印表机service ip6tables stop chkconfig ip6tables off #禁止IPv6\n如果要恢复某一个服务，可以执行下面操作service acpid start chkconfig acpid on\n4.禁止非root用户执行&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;下的系统命令chmod -R 700 /etc/rc.d/init.d/*chmod -R 777 /etc/rc.d/init.d/* #恢复默认设置\n5.给下面的文件加上不可更改属性，从而防止非授权用户获得权限chattr +i /etc/passwdchattr +i /etc/shadowchattr +i /etc/groupchattr +i /etc/gshadowchattr +i /etc/services #给系统服务端口列表文件加锁,防止未经许可的删除或添加服务lsattr /etc/passwd /etc/shadow /etc/group /etc/gshadow /etc/services #显示文件的属性\n注意：执行以上权限修改之后，就无法添加删除用户了。果再要添加删除用户，需要先取消上面的设置，等用户添加删除完成之后，再执行上面的操作。chattr -i /etc/passwd #取消权限锁定设置chattr -i /etc/shadowchattr -i /etc/groupchattr -i /etc/gshadowchattr -i /etc/services #取消系统服务端口列表文件加锁\n现在可以进行添加删除用户了，操作完之后再锁定目录文件###6.限制不同文件的权限\nchattr +a .bash_history #避免删除.bash_history或者重定向到/dev/nullchattr +i .bash_historychmod 700 /usr/bin #恢复 chmod 555 /usr/binchmod 700 /bin/ping #恢复 chmod 4755 /bin/pingchmod 700 /usr/bin/vim #恢复 chmod 755 /usr/bin/vimchmod 700 /bin/netstat #恢复 chmod 755 /bin/netstatchmod 700 /usr/bin/tail #恢复 chmod 755 /usr/bin/tailchmod 700 /usr/bin/less #恢复 chmod 755 /usr/bin/lesschmod 700 /usr/bin/head#恢复 chmod 755 /usr/bin/headchmod 700 /bin/cat #恢复 chmod 755 /bin/catchmod 700 /bin/uname #恢复 chmod 755 /bin/unamechmod 500 /bin/ps #恢复 chmod 755 /bin/ps\n7.禁止使用Ctrl+Alt+Del快捷键重启服务器cp /etc/inittab /etc/inittabbakvi /etc/inittab #注释掉下面这一行#ca::ctrlaltdel:/sbin/shutdown -t3 -r now\n8.使用yum update更新系统时不升级内核，只更新软件包由于系统与硬件的兼容性问题，有可能升级内核后导致服务器不能正常启动，这是非常可怕的，没有特别的需要，建议不要随意升级内核。\n修改yum的配置文件 vi &#x2F;etc&#x2F;yum.conf 在[main]的最后添加 exclude&#x3D;kernel*\n直接在yum的命令后面加上如下的参数：yum --exclude=kernel* update查看系统版本cat /etc/issue查看内核版本uname -a\n\n9.关闭Centos自动更新chkconfig --list yum-updatesd #显示当前系统状态yum-updatesd   #0:关闭 1:关闭 2:启用 3:启用 4:启用 5:启用 6:关闭service yum-updatesd stop #关闭 开启参数为start# 停止 yum-updatesd： [确定]service yum-updatesd status #查看是否关闭yum-updatesd # 已停chkconfig --level 35 yum-updatesd off #禁止开启启动（系统模式为3、5）chkconfig yum-updatesd off #禁止开启启动（所有启动模式全部禁止）chkconfig --list yum-updatesd #显示当前系统状态yum-updatesd # 0:关闭 1:关闭 2:启用 3:关闭 4:启用 5:关闭 6:关闭\n10.关闭多余的虚拟控制台我们知道从控制台切换到 X 窗口，一般采用 Alt-F7 ，为什么呢？因为系统默认定义了 6 个虚拟控制台，所以 X 就成了第7个。实际上，很多人一般不会需要这么多虚拟控制台的，修改&#x2F;etc&#x2F;inittab ，注释掉那些你不需要的。cp /etc/inittab /etc/inittabbakvi /etc/inittab\n# Run gettys in standard runlevels1:2345:respawn:/sbin/mingetty tty1#2:2345:respawn:/sbin/mingetty tty2#3:2345:respawn:/sbin/mingetty tty3#4:2345:respawn:/sbin/mingetty tty4#5:2345:respawn:/sbin/mingetty tty5#6:2345:respawn:/sbin/mingetty tty6\n11.删除[MySQL]历史记录用户登陆[数据库]后执行的SQL命令也会被MySQL记录在用户目录的.mysql_history文件里。如果数据库用户用SQL语句修改了数据库密码，也会因.mysql_history文件而泄漏。所以我们在shell登陆及备份的时候不要在-p后直接加密码，而是在提示后再输入数据库密码。另外这两个文件我们也应该不让它记录我们的操作，以防万一。cdcp .bash_history .bash_historybak #备份cp .mysql_history .mysql_historybakrm .bash_history .mysql_historyln -s /dev/null .bash_historyln -s /dev/null .mysql_history\n11. 修改history命令记录cp /etc/profile /etc/profilebakvi /etc/profile#找到 HISTSIZE=1000 改为 HISTSIZE=50\n12.隐藏服务器系统信息在缺省情况下，当你登陆到[Linux]系统，它会告诉你该linux发行版的名称、版本、内核版本、服务器的名称。为了不让这些默认的信息泄露出来，我们要进行下面的操作，让它只显示一个”login:”提示符。删除&#x2F;etc&#x2F;issue和&#x2F;etc&#x2F;issue[.NET]这两个文件，或者把这2个文件改名，效果是一样的。mv /etc/issue /etc/issuebakmv /etc/issue.net /etc/issue.netbak\n13.优化Linux内核参数然后编辑 &#x2F;etc&#x2F;sysctl.confvim /etc/sysctl.conf\nfs.file-max = 51200net.core.rmem_max = 67108864net.core.wmem_max = 67108864net.core.netdev_max_backlog = 250000net.core.somaxconn = 4096net.ipv4.tcp_syncookies = 1net.ipv4.tcp_tw_reuse = 1net.ipv4.tcp_tw_recycle = 0net.ipv4.tcp_fin_timeout = 30net.ipv4.tcp_keepalive_time = 1200net.ipv4.ip_local_port_range = 10000 65000net.ipv4.tcp_max_syn_backlog = 8192net.ipv4.tcp_max_tw_buckets = 5000net.ipv4.tcp_fastopen = 3net.ipv4.tcp_rmem = 4096 87380 67108864net.ipv4.tcp_wmem = 4096 65536 67108864net.ipv4.tcp_mtu_probing = 1\n14.CentOS 系统优化cp /etc/profile /etc/profilebak2vim /etc/profile #在文件末尾添加以下内容\nulimit -c unlimitedulimit -s unlimitedulimit -SHn 65535source /etc/profile #使配置立即生效\nulimit -a #显示当前的各种用户进程限制15.服务器禁止pingcp /etc/rc.d/rc.local /etc/rc.d/rc.localbakvim /etc/rc.d/rc.local #在文件末尾增加下面这一行echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all\n参数0表示允许 1表示禁止16.防止IP欺骗编辑host.conf文件并增加如下几行来防止IP欺骗攻击。vim /etc/host.conf\norder bind，hostsmulti offnospoof on\n16.防止DoS攻击对系统所有的用户设置资源限制可以防止DoS类型攻击。如最大进程数和内存使用数量等。例如，可以在&#x2F;etc&#x2F;security&#x2F;limits.conf中添加如下几行：* hard core 0* hard rss 5000  #( 本行或许没用,man limits.conf 显示 maximum resident set size (KB) (Ignored in Linux 2.4.30 and higher)* hard nproc 50\n然后必须编辑&#x2F;etc&#x2F;pam.d&#x2F;login文件检查下面一行是否存在。session required /lib/security/pam_limits.so\n上面的命令禁止调试文件，限制进程数为50并且限制内存使用为5MB。17.自动注销帐号的登录vim /etc/profile\n修改”HISTSIZE&#x3D;”后面加入下面这行：TMOUT = 300\n300，表示5分。这样，如果系统中登陆的用户在5分钟内都没有动作，那么系统会自动注销这个账户。18.限制su切换vim /etc/pam.d/su\n文件中找到#auth required pam_wheel.so use_uid，去掉前面的注释#。19.修改sshd更新中","categories":["系统运维"],"tags":["Linux","Centos"]},{"title":"MySQL 基本操作：增删改查","url":"/mysql-basic-crud-operations/","content":"所有字段插入值注意插入值数目要与字段值一致INSERT INTO student VALUES(1,&#x27;熊大&#x27;,&#x27;123&#x27;,&#x27;2019-10-18&#x27;,1200);INSERT INTO student VALUES(3,&#x27;熊二&#x27;,&#x27;123&#x27;,&#x27;2019-10-18&#x27;,1200);\n\n部分字段插入值INSERT  INTO student (uid,PASSWORD, money)VALUES(2,&#x27;123456&#x27;,10000);\n\n修改语句UPDATE student SET uname=&#x27;熊二&#x27; WHERE uid=2;UPDATE student SET PASSWORD=&#x27;123456&#x27; WHERE uname=&#x27;熊二&#x27;;\n\n修改多个逗号分隔UPDATE student SET uname=&#x27;琪琪国王&#x27;,PASSWORD=&#x27;admin&#x27;WHERE uid=1;UPDATE student SET birth=&#x27;2019/11/29&#x27;WHERE uid=2;\n\n不带条件的删除：全表删除 能回滚 只能删除数据不删约束DELETE FROM student\n\n带条件的删除DELETE FROM student WHERE uid=3\n\n全表删除 不能回滚 数据约束全删TRUNCATE TABLE student\n\n查询所有数据SELECT *FROM student;\n\n查询指定字段的值SELECT uname,PASSWORD FROM student\n\n查询时添加常量列SELECT uname AS n,PASSWORD AS p FROM student\n查询时合并列SELECT sname,(html+js+jquery)/3 AS savg FROM score\n\n查询时保留小数位数SELECT sname,FORMAT(html,3) AS html FROM score\n\n查询时对某个字段的值进行去重查询所有同学所在的班级都有那几个班级SELECT DISTINCT sclass FROM scoreSELECT DISTINCT(sclass) FROM score\n\n条件查询查询所有女生的所有信息SELECT * FROM score WHERE sex=&#x27;女&#x27;\n\n查询所有男生的姓名，html成绩和jquery成绩*&#x2F;SELECT sname,html,jquery FROM score WHERE sex&#x3D;’男’&#x2F;查询外婆在哪个班&#x2F;SELECT sclass FROM score WHERE sname&#x3D;’外婆’&#x2F;查询所有js成绩不合格的同学的姓名&#x2F;SELECT sname FROM score WHERE js&lt;60\n&#x2F;*查询jquery成绩合格的所有女同学信息\nSELECT * FROM score WHERE jquery&gt;=60 AND sex=&#x27;女&#x27;\n\n查询所有html成绩不合格的男同学姓名SELECT sname FROM score WHERE html&lt;60 AND sex=&#x27;男&#x27;\n\n查询js成绩合格或者是html成绩合格的同学信息SELECT * FROM score WHERE js&gt;=60 OR html&gt;=60\n\n查询性别为男或者是java1018的同学姓名SELECT * FROM score WHERE js&gt;=60 OR html&gt;=60;\n\n####不等于 &lt;&gt; !&#x3D;\nSELECT * FROM score WHERE html&lt;&gt;10;\n\n查询HTML成绩在70-100之间同学信息 包头包尾studentSELECT * FROM score WHERE html BETWEEN 70 AND 100;\n\n查询学生表中 姓名不为空的学生信息SELECT * FROM student WHERE uname&lt;&gt;&#x27;&#x27; AND uname IS NOT NULL;\n\n查询学生表中 mima为空的学生信息SELECT * FROM student WHERE PASSWORD=&#x27;&#x27; OR PASSWORD IS NULL;\n\n查询score表中性大的信息SELECT * FROM score WHERE sname LIKE &#x27;大%&#x27;;\n\n查询score表中性大两个的信息SELECT * FROM score WHERE sname LIKE &#x27;大_&#x27;;\n\n查询score表中性两个的信息SELECT * FROM score WHERE sname LIKE &#x27;__&#x27;;\n\n查询score表java1018 js 总成绩SELECT SUM(js)AS js总成绩 FROM score WHERE sclass=&#x27;java1018&#x27;;\n\n查询score表java0723 html 平均成绩SELECT FORMAT(AVG(html),2) FROM score WHERE sclass=&#x27;java0723&#x27;;\n\n查询score表java1018 jquery最高分SELECT MAX(jquery) FROM score WHERE sclass=&#x27;java1018&#x27;;\n\n查询score表所有学生总成绩的最低分SELECT MIN(IFNULL(jquery,0)+IFNULL(js,0)+IFNULL(html,0)) FROM score;\n\n查询score本班有多少人  COUNT(*)原理是把每一列都统计一下取最大值SELECT COUNT(*)FROM score;\n\n查询本班有多少人SELECT sname,COUNT(*) FROM score-- 分页查询-- 每页显示两条-- 第一页 limit 起始行（从零开始），每页显示行数-- 分页：limit(当前页-1)*每页显示的条数，每页显示的条数SELECT * from score LIMIT 0,2;/*第二页*/SELECT * from score LIMIT 2,2;/*第三页*/SELECT * from score LIMIT 4,2;\n\n排序放到最后查询所有同学信息并且按照js成绩从大到小排SELECT *from score ORDER BY js desc;SELECT *from score ORDER BY js asc;SELECT *from score ORDER BY js;-- 查询所有同学信息并且按照js成绩从大到小排 jquery成绩正序SELECT *from score ORDER BY js desc,jquery asc;\n\n查询男女的人数select sex,COUNT(*) FROM score  GROUP BY sex ORDER BY COUNT(*);\n\n查询每个性别的js总成绩SELECT sex,SUM(js)FROM score  GROUP BY sex ORDER BY sum(js);\n\n查询哪个性别的js高于60分总成绩SELECT sex,SUM(js)FROM score  GROUP BY sex HAVING sum(js)&gt;60 ;SELECT sex,SUM(js)as tt FROM score  GROUP BY sex HAVING tt&gt;60;\n\n查询java1018班每个性别的js总成绩且高于60分SELECT sex,SUM(js)FROM score WHERE sclass=&#x27;java1018&#x27; GROUP BY sex HAVING sum(js)&gt;=60 ;\n\n查询那个姓别的人数大于一SELECT sex,sum(js),sum(jquery),sum(html)FROM score GROUP BY sex;SELECT sex FROM score GROUP BY sex HAVING sex&lt;&gt;&#x27;女&#x27;and count(*)&gt;1;SELECT SUM(IFNULL(js,0))AS js总成绩 FROM score WHERE sclass=&#x27;java1018&#x27;;","categories":["数据库"],"tags":["MySQL"]},{"title":"利用oh-my-zsh打造漂亮的终端","url":"/oh-my-zsh-beautify-terminal/","content":"\n本文以CentOS 7&#x2F;Mac 为例，介绍zsh的配置使用教程。\n\n准备查看当前环境shellecho $SHELL\n\n查看系统自带哪些shellcat /etc/shells\n\n安装zshyum install zsh # CentOSbrew install zsh # mac安装\n\n将zsh设置为默认shellchsh -s /bin/zsh # CentOS# Mac如下# 在 /etc/shells 文件中加入如下一行/usr/local/bin/zsh# 接着运行chsh -s /usr/local/bin/zsh\n\n可以通过echo $SHELL查看当前默认的shell，如果没有改为/bin/zsh，那么需要重启shell。\noh-my-zsh配置zsh是一件麻烦的事儿，爱折腾的程序猿怎么可能忍受？！于是，oh-my-zsh出现了，有了这个东东，zsh配置起来就方便多了！\n安装oh-my-zsh有若干安装方式，介绍三种：1.自动安装\nwget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh\n\n2.手动安装\ngit clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zshcp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n\n3.真-手动安装\n\n在oh-my-zsh的github主页，手动将zip包下载下来。\n将zip包解压，拷贝至~/.oh-my-zsh目录。此处省略拷贝的操作步骤。\n执行cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n\n三选一即可，适合各种环境下的安装，然后需要source ~/.zshrc将配置生效。以下修改了.zshrc文件之后，都执行一下这个命令。\nzsh主题通过如下命令可以查看可用的Theme：\n# ls ~/.oh-my-zsh/themes\n\n如何修改zsh主题呢？编辑~/.zshrc文件，将ZSH_THEME=&quot;candy&quot;,即将主题修改为candy。我采用的steeef。\nzsh扩展在~/.zshrc中找到plugins关键字，就可以自定义启用的插件了，系统默认加载git。\ngit插件命令内容可以参考cat ~/.oh-my-zsh/plugins/git/git.plugin.zsh。\n常用的：\ngapa    git add --patchgc!    git commit -v --amendgcl    git clone --recursivegclean    git reset --hard &amp;&amp; git clean -dfxgcm    git checkout mastergcmsg    git commit -mgco    git checkoutgd    git diffgdca    git diff --cachedgp    git pushgrbc    git rebase --continuegst    git statusgup    git pull --rebase\n\n完整列表：https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git\nextract解压文件用的，所有的压缩文件，都可以直接x filename，不用记忆参数\n当然，如果你想要用tar命令，可以使用tar -加tab键，zsh会列出参数的含义。\nautojump按照官方文档介绍，需要使用如下命令安装，而不是一些博客中的介绍：\nyum install autojump-zsh # CentOSbrew install autojump # Mac\n\nCentOS安装好之后，需要在~/.zshrc中配置一下，除了在plugins中增加autojump之外，还需要添加一行：\n[[ -s ~/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; . ~/.autojump/etc/profile.d/autojump.sh\n\n安装好之后，记得source ~/.zshrc，然后你就可以通过j+目录名快速进行目录跳转。支持目录名的模糊匹配和自动补全。\n\nj -stat：可以查看历史路径库\n\nzsh-autosuggestionszsh-autosuggestions\ngit clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions\n\n在 ~/.zshrc 中配置\nplugins=(其他的插件 zsh-autosuggestions)\n\n因为箭头→不太方便，在.zshrc中自定义补全快捷键为逗号，但是又一次遇到了需要输入逗号的情况，所以，并不太推荐如下修改：\nbindkey &#x27;,&#x27; autosuggest-accept\n\nzsh-syntax-highlightingzsh-syntax-highlighting\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting\n\n~/.zshrc文件中配置：\nplugins=(其他的插件 zsh-syntax-highlighting)\n\ngit-opengit-open插件可以在你git项目下打开远程仓库浏览项目。\ngit clone https://github.com/paulirish/git-open.git $ZSH_CUSTOM/plugins/git-open\n\nbatbat 代替 catcat 某个文件，可以在终端直接输出文件内容，bat 相比 cat 增加了行号和颜色高亮 👍\nbrew install bat\n\n常用快捷键\n命令历史记录\n一旦在 shell 敲入正确命令并能执行后，shell 就会存储你所敲入命令的历史记录（存放在~/.zsh_history 文件中），方便再次运行之前的命令。可以按方向键↑和↓来查看之前执行过的命令\n可以用 r来执行上一条命令\n使用 ctrl-r 来搜索命令历史记录\n\n\n命令别名\n可以简化命令输入，在 .zshrc 中添加 alias shortcut=&#39;this is the origin command&#39; 一行就相当于添加了别名\n在命令行中输入 alias 可以查看所有的命令别名\n\n\n\n使用技巧\n连按两次Tab会列出所有的补全列表并直接开始选择，补全项可以使用 ctrl+n&#x2F;p&#x2F;f&#x2F;b上下左右切换\n智能跳转，安装了 autojump 之后，zsh 会自动记录你访问过的目录，通过 j 目录名 可以直接进行目录跳转，而且目录名支持模糊匹配和自动补全，例如你访问过 hadoop-1.0.0 目录，输入j hado 即可正确跳转。j –stat 可以看你的历史路径库。\n命令选项补全。在zsh中只需要键入 tar - 就会列出所有的选项和帮助说明\n在当前目录下输入 .. 或 … ，或直接输入当前目录名都可以跳转，你甚至不再需要输入 cd 命令了。在你知道路径的情况下，比如 /usr/local/bin 你可以输入 cd /u/l/b 然后按进行补全快速输入\n目录浏览和跳转：输入 d，即可列出你在这个会话里访问的目录列表，输入列表前的序号，即可直接跳转。\n命令参数补全。键入 kill &lt;tab&gt; 就会列出所有的进程名和对应的进程号\n更智能的历史命令。在用或者方向上键查找历史命令时，zsh支持限制查找。比如，输入ls,然后再按方向上键，则只会查找用过的ls命令。而此时使用则会仍然按之前的方式查找，忽略 ls\n多个终端会话共享历史记录\n通配符搜索：ls -l **/*.sh，可以递归显示当前目录下的 shell 文件，文件少时可以代替 find。使用 **/ 来递归搜索\n扩展环境变量，输入环境变量然后按 就可以转换成表达的值\n在 .zshrc 中添加 setopt HIST_IGNORE_DUPS 可以消除重复记录，也可以利用sort -t &quot;;&quot; -k 2 -u ~/.zsh_history | sort -o ~/.zsh_history手动清除\n\n参考\nwting&#x2F;autojump–官方文档\npowerline&#x2F;fonts\n\n","categories":["系统运维"],"tags":["Linux","Terminal","Shell","终端"]},{"title":"NOTEPAD++正则表达式","url":"/notepad-plusplus-regex-guide/","content":"正则表达式语法\\   转义字符  如：要使用 “\\” 本身, 则应该使用“\\\\”\\t  Tab制表符  注：扩展和正则表达式都支持\\r  回车符CR   注：扩展支持，正则表达式不支持\\n  换行符LF   注：扩展支持，正则表达式不支持.  匹配任意一个字符^ 其右边的表达式被匹配在行首。如：^A匹配以“A”开头的行$ 其左边的表达式被匹配在行尾。如：e$匹配以“e”结尾的行|  或运算符，匹配表达式左边和右边的字符串。如：ab|bc匹配“ab”或“bc”[] 匹配列表中任意单个字符。如：[ab]匹配“a”或“b”；[0-9]匹配任意单个数字[^] 匹配列表之外的任意单个字符。如：[^ab]匹配“a”和“b”以外的单个字符；[^0-9]匹配任意单个非数字字符* 其左边的字符被匹配任意次(0次或多次)。如：be*匹配“b”,“be”或“bee”+ 其左边的字符被匹配至少一次(1次或多次)。如：be+匹配“be”或“bee”，但不匹配“b”? 其左边的字符被匹配0次或者1次。如：be?匹配“b”或“be”，但不匹配“bee”；\\r?\\n匹配行结尾符() 影响表达式匹配的顺序(类似C++的小括号会影响表达式运算顺序)，并且用作表达式的分组标记（标记从1开始）如：([a-z]bc)smn\\1匹配“tbcsmntbc”；&#123;&#125; 指定前面的字符或分组的出现次数  如：abc&#123;3&#125;匹配abccc；a(bc)&#123;2&#125;匹配abcbc\\d 匹配一个数字字符。等价于：[0-9]\\D \\d取反，匹配一个非数字字符。等价于：[^0-9]\\s 匹配任意单个空白字符：包括空格、制表符等（注：不包括换车符和换行符）,等价于：[ \\t]\\S  \\s取反的任意单个字符。\\w 匹配包括下划线的任意单个字符。等价于：[A-Za-z0-9_]\\W \\w取反的任意单个字符。等价于：[^A-Za-z0-9_]\\b 匹配单词起始处或结尾处  如：\\bin匹配int，但不匹配sing\n常用示例1.校验数字的表达式1. 数字：^[0-9]*$2. n位的数字：^d&#123;n&#125;$3. 至少n位的数字：^d&#123;n,&#125;$4. m-n位的数字：^d&#123;m,n&#125;$5. 零和非零开头的数字：^(0|[1-9][0-9]*)$6. 非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]&#123;1,2&#125;)?$7. 带1-2位小数的正数或负数：^(-)?d+(.d&#123;1,2&#125;)?$8. 正数、负数、和小数：^(-|+)?d+(.d+)?$9. 有两位小数的正实数：^[0-9]+(.[0-9]&#123;2&#125;)?$10. 有1~3位小数的正实数：^[0-9]+(.[0-9]&#123;1,3&#125;)?$11. 非零的正整数：^[1-9]d*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$ 或 ^+?[1-9][0-9]*$12. 非零的负整数：^-[1-9][]0-9&quot;*$ 或 ^-[1-9]d*$13. 非负整数：^d+$ 或 ^[1-9]d*|0$14. 非正整数：^-[1-9]d*|0$ 或 ^((-d+)|(0+))$15. 非负浮点数：^d+(.d+)?$ 或 ^[1-9]d*.d*|0.d*[1-9]d*|0?.0+|0$16. 非正浮点数：^((-d+(.d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]d*.d*|0.d*[1-9]d*))|0?.0+|0$17. 正浮点数：^[1-9]d*.d*|0.d*[1-9]d*$ 或 ^(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*))$18. 负浮点数：^-([1-9]d*.d*|0.d*[1-9]d*)$ 或 ^(-(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*)))$19. 浮点数：^(-?d+)(.d+)?$ 或 ^-?([1-9]d*.d*|0.d*[1-9]d*|0?.0+|0)$\n\n2. 校验字符的表达式1. 汉字：^[u4e00-u9fa5]&#123;0,&#125;$2. 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;$3. 长度为3-20的所有字符：^.&#123;3,20&#125;$4. 由26个英文字母组成的字符串：^[A-Za-z]+$5. 由26个大写英文字母组成的字符串：^[A-Z]+$6. 由26个小写英文字母组成的字符串：^[a-z]+$7. 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$8. 由数字、26个英文字母或者下划线组成的字符串：^w+$ 或 ^w&#123;3,20&#125;$9. 中文、英文、数字包括下划线：^[u4E00-u9FA5A-Za-z0-9_]+$10. 中文、英文、数字但不包括下划线等符号：^[u4E00-u9FA5A-Za-z0-9]+$ 或 ^[u4E00-u9FA5A-Za-z0-9]&#123;2,20&#125;$11. 可以输入含有^%&amp;&#x27;,;=?$&quot;等字符：[^%&amp;&#x27;,;=?$x22]+ 12 禁止输入含有~的字符：[^~x22]+\n\n3. 特殊需求表达式1. Email地址：^w+([-+.]w+)*@w+([-.]w+)*.w+([-.]w+)*$2. 域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?3. InternetURL：[a-zA-z]+://[^s]* 或 ^http://([w-]+.)+[w-]+(/[w-./?%&amp;=]*)?$4. 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])d&#123;8&#125;$5. 电话号码(&quot;XXX-XXXXXXX&quot;、&quot;XXXX-XXXXXXXX&quot;、&quot;XXX-XXXXXXX&quot;、&quot;XXX-XXXXXXXX&quot;、&quot;XXXXXXX&quot;和&quot;XXXXXXXX)：^((d&#123;3,4&#125;-)|d&#123;3.4&#125;-)?d&#123;7,8&#125;$6. 国内电话号码(0511-4405222、021-87888822)：d&#123;3&#125;-d&#123;8&#125;|d&#123;4&#125;-d&#123;7&#125;7. 身份证号(15位、18位数字)：^d&#123;15&#125;|d&#123;18&#125;$8. 短身份证号码(数字、字母x结尾)：^([0-9])&#123;7,18&#125;(x|X)?$ 或 ^d&#123;8,18&#125;|[0-9x]&#123;8,18&#125;|[0-9X]&#123;8,18&#125;?$9. 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$10. 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]w&#123;5,17&#125;$11. 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$12. 日期格式：^d&#123;4&#125;-d&#123;1,2&#125;-d&#123;1,2&#125;13. 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$14. 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$15. 钱的输入格式：    15.1.有四种钱的表示形式我们可以接受:&quot;10000.00&quot; 和 &quot;10,000.00&quot;, 和没有 &quot;分&quot; 的 &quot;10000&quot; 和 &quot;10,000&quot;：^[1-9][0-9]*$    15.2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符&quot;0&quot;不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$    15.3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$    15.4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$    15.5.必须说明的是,小数点后面至少应该有1位数,所以&quot;10.&quot;是不通过的,但是 &quot;10&quot; 和 &quot;10.2&quot; 是通过的：^[0-9]+(.[0-9]&#123;2&#125;)?$    15.6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]&#123;1,2&#125;)?$    15.7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$    15.8. 1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$16. 备注：这就是最终结果了,别忘了&quot;+&quot;可以用&quot;*&quot;替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里17. xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+.[x|X][m|M][l|L]$18. 中文字符的正则表达式：[u4e00-u9fa5]19. 双字节字符：[^x00-xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))20. 空白行的正则表达式：ns*r (可以用来删除空白行)21. HTML标记的正则表达式：&lt;(S*?)[^&gt;]*&gt;.*?&lt;/1&gt;|&lt;.*? /&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)22. 首尾空白字符的正则表达式：^s*|s*$或(^s*)|(s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)23. 腾讯QQ号：[1-9][0-9]&#123;4,&#125; (腾讯QQ号从10000开始)24. 中国邮政编码：[1-9]d&#123;5&#125;(?!d) (中国邮政编码为6位数字)25. IP地址：d+.d+.d+.d+ (提取IP地址时有用)26. IP地址：((?:(?:25[0-5]|2[0-4]d|[01]?d?d).)&#123;3&#125;(?:25[0-5]|2[0-4]d|[01]?d?d))\n\n4. 特定字符s之后的所有字符:s.*$\n\n5. 特定字符s之前的所有字符:^([^s]*)s\n\n6. 去除重复行:^(.*?)$\\s+?^(?=.*^\\1$)\n\n7.所有的中文字符:[一-龥！-～]\n\n8.所有行中的第一个中文字符至行尾的所有字符:[一-龥！-～].*$","categories":["文本编辑"],"tags":["NOTEPAD++","编辑器"]},{"title":"PicGo搭建博客图床+阿里云OSS教程","url":"/picgo-blog-image-hosting-aliyun-oss/","content":"\n对于写博客来说，搭建一个图床是必不可少的。本地图片插入到文章中，发布之后图片就没得了。转存到CSDN是个不错的选择，但是对于自己搭建的博客来说，还是比较麻烦的。现在，我来手把手教你搭建图床。\n\n一、准备工作\n安装PicGo\n图床区\n\n图床分类：\n\nSMMS\n七牛图床\n腾讯云COS\n阿里云OSS\n又拍云\nGitHub图床\nGitee图床\nImgur图床\n\n二、PicGo安装一个用于快速上传图片并获取图片URL链接的工具\n\n\nPicGo能够文件上传，也支持剪贴板上传\n上传过程为： 1. 拖拽文件或点击上传文件或点击剪贴板图片上传 2. 上传完成后电脑剪贴板里就有了所选链接格式的图片链接 3. 粘贴即可\n安装好之后要配置一下快捷键\n\n快捷键依据个人习惯配置即可，此处我是Ctrl + W\n\n你Ctrl + C截图之后，再按Ctrl + W，截图直接就上传到存储桶中了，图片的路径不再是本地路径了。\n三、配置阿里云OSS好多小伙伴搭建个人博客都用了阿里云，怎么，是它不够香吗？很香！云服务器 + OSS使用起来也方便。为了方便大家，我在写这篇文章时，买了一年的阿里云对象存储OSS资源包。\n如果要选择阿里云的小伙伴，先看看这篇薅羊毛助手\n具体就是买的时间越长越便宜，半年￥4.98，建议大家买一年，9块钱。为了学习，不亏！\n购买阿里云OSS服务1. 登录阿里云，点击控制台\n\n2. 打开侧边栏，选择对象存储OSS，如下图：\n\n3. 对象存储界面右部选择创建Bucket\n\n4. 侧边栏配置信息\n\n购买对象存储OSS资源包(包月)\n\n购买完之后，需要添加用户。\n添加用户1. 推荐最好是单独创建一个用户来单独操作OSS（用户的定义就是需要访问云资源的人员或应用程序），这样给这个用户赋予单独的访问 OSS的权限，更加安全方便。\n添加用户步骤为：点击自己头像，然后选择访问控制\n\n2. 点击用户，选择新建用户\n\n之后进行用户配置，注意要勾选编程访问，控制台密码登录可以不选择，登录名称，显示名称自己设定\n\n3. 确定后得到创建用户的信息，这里要记下AccessKey ID 和 AccessKeySecret，之后配置PicGo用到，最好 记在记事本里\n\n设置用户权限，使得用户只能访问OSS的服务，点击添加权限：\n\n4. 选择管理对象存储服务权限\n\n配置PicGo&#123;      &quot;accessKeyId&quot;: &quot;&quot;,      &quot;accessKeySecret&quot;: &quot;&quot;,      &quot;area&quot;: &quot;&quot;,\t\t// 存储区域代号      &quot;bucket&quot;: &quot;&quot;,\t\t// 存储空间名      &quot;customUrl&quot;: &quot;&quot;,\t// 自定义域名，注意要加http://或者https://      &quot;options&quot;: &quot;&quot;,      &quot;path&quot;: &quot;&quot;\t\t// 自定义存储路径    &#125;\n\n\n\nKeyId：就是创建用户的AccessKey ID\nKeySecret：AccessKeySecret\n存储空间名：创建Bucket的名字\n存储区域：创建时设定的， 忘记的可以通过Bucket概览查看（见下图）\n存储路径：默认设置imgs/即可，如果自己有已经备案的域名，可以填写设定自定义域名，如果没有不填即可。\n\n\n设置为默认图床即可\n\n文件上传存储\n\n到此，云端图床的配置和使用就完成了。更多的图床搭建参考文内的官网链接还有教程即可！\n大家是用什么搭建的个人博客呢？\n","categories":["互联网"],"tags":["Aliyun","AlibabaCloud","PicGo","OSS","图床","对象存储"]},{"title":"sed命令","url":"/sed-command-guide/","content":"sed是一种流编辑器，它是文本处理中非常中的工具，能够完美的配合正则表达式使用，功能不同凡响。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有 改变，除非你使用重定向存储输出。Sed主要用来自动编辑一个或多个文件；简化对文件的反复操作；编写转换程序等。\nsed的选项、命令、替换标记命令格式sed [options] &#x27;command&#x27; file(s)sed [options] -f scriptfile file(s)\n\n\n选项\n-e&lt;script&gt;或--expression=&lt;script&gt;：以选项中的指定的script来处理输入的文本文件；-f&lt;script文件&gt;或--file=&lt;script文件&gt;：以选项中指定的script文件来处理输入的文本文件；-h或--help：显示帮助；-n或--quiet或——silent：仅显示script处理后的结果；-V或--version：显示版本信息。\n\n\n参数\n文件：指定待处理的文本文件列表。\n\nsed命令\na\\ 在当前行下面插入文本。i\\ 在当前行上面插入文本。c\\ 把选定的行改为新的文本。d 删除，删除选择的行。D 删除模板块的第一行。s 替换指定字符h 拷贝模板块的内容到内存中的缓冲区。H 追加模板块的内容到内存中的缓冲区。g 获得内存缓冲区的内容，并替代当前模板块中的文本。G 获得内存缓冲区的内容，并追加到当前模板块文本的后面。l 列表不能打印字符的清单。n 读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。N 追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。p 打印模板块的行。P(大写) 打印模板块的第一行。q 退出Sed。b lable 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。r file 从file中读行。t label if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。T label 错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。w file 写并追加模板块到file末尾。  W file 写并追加模板块的第一行到file末尾。  ! 表示后面的命令对所有没有被选定的行发生作用。  = 打印当前行号码。  # 把注释扩展到下一个换行符以前。\n\n\nsed替换标记\ng 表示行内全面替换。  p 表示打印行。  w 表示把行写入一个文件。  x 表示互换模板块中的文本和缓冲区中的文本。  y 表示把一个字符翻译为另外的字符（但是不用于正则表达式）\\1 子串匹配标记&amp; 已匹配字符串标记\n\n\nsed元字符集\n^ 匹配行开始，如：/^sed/匹配所有以sed开头的行。$ 匹配行结束，如：/sed$/匹配所有以sed结尾的行。. 匹配一个非换行符的任意字符，如：/s.d/匹配s后接一个任意字符，最后是d。* 匹配0个或多个字符，如：/*sed/匹配所有模板是一个或多个空格后紧跟sed的行。[] 匹配一个指定范围内的字符，如/[ss]ed/匹配sed和Sed。  [^] 匹配一个不在指定范围内的字符，如：/[^A-RT-Z]ed/匹配不包含A-R和T-Z的一个字母开头，紧跟ed的行。\\(..\\) 匹配子串，保存匹配的字符，如s/\\(love\\)able/\\1rs，loveable被替换成lovers。&amp; 保存搜索字符用来替换其他字符，如s/love/**&amp;**/，love这成**love**。\\&lt; 匹配单词的开始，如:/\\&lt;love/匹配包含以love开头的单词的行。\\&gt; 匹配单词的结束，如/love\\&gt;/匹配包含以love结尾的单词的行。x\\&#123;m\\&#125; 重复字符x，m次，如：/0\\&#123;5\\&#125;/匹配包含5个0的行。x\\&#123;m,\\&#125; 重复字符x，至少m次，如：/0\\&#123;5,\\&#125;/匹配至少有5个0的行。x\\&#123;m,n\\&#125; 重复字符x，至少m次，不多于n次，如：/0\\&#123;5,10\\&#125;/匹配5~10个0的行。\n\nsed用法实例\n替换操作：s命令\n替换文本中的字符串：sed &#x27;s/book/books/&#x27; file\n\n-n选项和p命令一起使用表示只打印那些发生替换的行：sed -n &#39;s/test/TEST/p&#39; file\n直接编辑文件选项-i，会匹配file文件中每一行的第一个book替换为books：sed -i &#x27;s/book/books/g&#x27; file\n\n\n全面替换标记g\n使用后缀 &#x2F;g 标记会替换每一行中的所有匹配：sed &#x27;s/book/books/g&#x27; file\n\n当需要从第N处匹配开始替换时，可以使用 &#x2F;Ng：echo sksksksksksk | sed &#x27;s/sk/SK/2g&#x27;skSKSKSKSKSKecho sksksksksksk | sed &#x27;s/sk/SK/3g&#x27;skskSKSKSKSKecho sksksksksksk | sed &#x27;s/sk/SK/4g&#x27;skskskSKSKSK\n\n\n定界符\n以上命令中字符 &#x2F; 在sed中作为定界符使用，也可以使用任意的定界符：sed &#x27;s:test:TEXT:g&#x27;sed &#x27;s|test|TEXT|g&#x27;\n\n定界符出现在样式内部时，需要进行转义：sed &#x27;s/\\/bin/\\/usr\\/local\\/bin/g&#x27;\n\n\n删除操作：d命令\n删除空白行：sed &#x27;/^$/d&#x27; file\n\n删除文件的第2行：sed &#x27;2d&#x27; file\n\n删除文件的第2行到末尾所有行：sed &#x27;2,$d&#x27; file\n\n删除文件最后一行：sed &#x27;$d&#x27; file\n\n删除文件中所有开头是test的行：sed &#x27;/^test/&#x27;d file\n\n\n已匹配字符串标记&amp;\n正则表达式 \\w+ 匹配每一个单词，使用 [&amp;] 替换它，&amp; 对应于之前所匹配到的单词：echo this is a test line | sed &#x27;s/\\w\\+/[&amp;]/g&#x27;[this] [is] [a] [test] [line]\n\n所有以192.168.0.1开头的行都会被替换成它自已加localhost：sed &#x27;s/^192.168.0.1/&amp;localhost/&#x27; file192.168.0.1localhost\n\n\n子串匹配标记\\1\n匹配给定样式的其中一部分：echo this is digit 7 in a number | sed &#x27;s/digit \\([0-9]\\)/\\1/&#x27;this is 7 in a number\n\n命令中 digit 7，被替换成了 7。样式匹配到的子串是 7，(..) 用于匹配子串，对于匹配到的第一个子串就标记为 \\1，依此类推匹配到的第二个结果就是 \\2，例如：echo aaa BBB | sed &#x27;s/\\([a-z]\\+\\) \\([A-Z]\\+\\)/\\2 \\1/&#x27;BBB aaa\n\nlove被标记为1，所有loveable会被替换成lovers，并打印出来：sed -n &#x27;s/\\(love\\)able/\\1rs/p&#x27; file\n\n\n组合多个表达式\nsed &#x27;表达式&#x27; | sed &#x27;表达式&#x27;等价于：sed &#x27;表达式; 表达式&#x27;\n\n\n引用\nsed表达式可以使用单引号来引用，但是如果表达式内部包含变量字符串，就需要使用双引号。test=helloecho hello WORLD | sed &quot;s/$test/HELLO&quot;HELLO WORLD\n\n\n选定行的范围：,（逗号）\n所有在模板test和check所确定的范围内的行都被打印：sed -n &#x27;/test/,/check/p&#x27; file\n\n打印从第5行开始到第一个包含以test开始的行之间的所有行：sed -n &#x27;5,/^test/p&#x27; file\n\n对于模板test和west之间的行，每行的末尾用字符串aaa bbb替换：sed &#x27;/test/,/west/s/$/aaa bbb/&#x27; file\n\n\n多点编辑：e命令\n-e选项允许在同一行里执行多条命令：sed -e &#x27;1,5d&#x27; -e &#x27;s/test/check/&#x27; file\n\n上面sed表达式的第一条命令删除1至5行，第二条命令用check替换test。命令的执行顺序对结果有影响。如果两个命令都是替换命令，那么第一个替换命令将影响第二个替换命令的结果。和 -e 等价的命令是 –expression：sed --expression=&#x27;s/test/check/&#x27; --expression=&#x27;/love/d&#x27; file\n\n\n从文件读入：r命令\nfile里的内容被读进来，显示在与test匹配的行后面，如果匹配多行，则file的内容将显示在所有匹配行的下面：sed &#x27;/test/r file&#x27; filename\n\n\n写入文件：w命令\n在example中所有包含test的行都被写入file里：sed -n &#x27;/test/w file&#x27; example\n\n\n追加（行下）：a\\命令\n将 this is a test line 追加到 以test 开头的行后面：sed &#x27;/^test/a\\this is a test line&#x27; file\n\n在 test.conf 文件第2行之后插入 this is a test line：sed -i &#x27;2a\\this is a test line&#x27; test.conf\n\n\n插入（行上）：i\\命令\n将 this is a test line 追加到以test开头的行前面：sed &#x27;/^test/i\\this is a test line&#x27; file\n\n在test.conf文件第5行之前插入this is a test line：sed -i &#x27;5i\\this is a test line&#x27; test.conf\n\n\n下一个：n命令\n如果test被匹配，则移动到匹配行的下一行，替换这一行的aa，变为bb，并打印该行，然后继续：sed &#x27;/test/&#123; n; s/aa/bb/; &#125;&#x27; file\n\n\n变形：y命令\n把1~10行内所有abcde转变为大写，注意，正则表达式元字符不能使用这个命令：sed &#x27;1,10y/abcde/ABCDE/&#x27; file\n\n\n退出：q命令\n打印完第10行后，退出sedsed &#x27;10q&#x27; file\n\n\n保持和获取：h命令和G命令\n在sed处理文件的时候，每一行都被保存在一个叫模式空间的临时缓冲区中，除非行被删除或者输出被取消，否则所有被处理的行都将 打印在屏幕上。接着模式空间被清空，并存入新的一行等待处理。sed -e &#x27;/test/h&#x27; -e &#x27;$G&#x27; file\n\n在这个例子里，匹配test的行被找到后，将存入模式空间，h命令将其复制并存入一个称为保持缓存区的特殊缓冲区内。第二条语句的意思是，当到达最后一行后，G命令取出保持缓冲区的行，然后把它放回模式空间中，且追加到现在已经存在于模式空间中的行的末尾。在这个例子中就是追加到最后一行。简单来说，任何包含test的行都被复制并追加到该文件的末尾。\n保持和互换：h命令和x命令\n互换模式空间和保持缓冲区的内容。也就是把包含test与check的行互换：sed -e &#x27;/test/h&#x27; -e &#x27;/check/x&#x27; file\n\n\n脚本scriptfile\nsed脚本是一个sed的命令清单，启动Sed时以-f选项引导脚本文件名。Sed对于脚本中输入的命令非常挑剔，在命令的末尾不能有任何空白或文本，如果在一行中有多个命令，要用分号分隔。以#开头的行为注释行，且不能跨行。sed [options] -f scriptfile file(s)\n\n\n打印奇数行或偶数行\n方法1：sed -n &#x27;p;n&#x27; test.txt  #奇数行sed -n &#x27;n;p&#x27; test.txt  #偶数行\n\n方法2：sed -n &#x27;1~2p&#x27; test.txt  #奇数行sed -n &#x27;2~2p&#x27; test.txt  #偶数行\n\n\n打印匹配字符串的下一行\ngrep -A 1 SCC URFILEsed -n &#x27;/SCC/&#123;n;p&#125;&#x27; URFILEawk &#x27;/SCC/&#123;getline; print&#125;&#x27; URFILE","categories":["系统运维"],"tags":["Linux","Command"]},{"title":"如何为typecho站点设置多个域名","url":"/typecho-setup-multiple-domains/","content":"\n前言\n\ntypecho后台只能设置一个域名，比如我设置了个http://xiaoqy.com，嗯这个域名就是被程序认知的域名，但是呢，这个http://www.xiaoqy.com带www的域名访问我的博客会出现问题，因为程序只认http://xiaoqy.com,所以会导致代带www的域名访问无法加载字体文件，那么如何解决这个问题呢？\n\n解决方法\n\n最初我告诉模板用户的解决方法是让http://www.xiaoqy.com重定向到http://xiaoqy.com，这样确实解决了问题。但是呢，如何让两个域名同时存在呢？\n\n方法一：\n\n在config.inc.php中定义Helper::options()-&gt;siteUrl=&#39;http://www.xiaoqy.com&#39;;（要放在数据库初始化之后，也就是最后）\n\n麻烦的方法二：\n\n需要修改typecho的源代码步骤一打开程序目录的这个文件/var/Widget/Options.php步骤二使用搜索找到这个位置\n/** 初始化站点信息 */       if (defined(&#x27;__TYPECHO_SITE_URL__&#x27;)) &#123;           $this-&gt;siteUrl = __TYPECHO_SITE_URL__;       &#125;\n\n步骤三在步骤二中的代码最前面加入下面的代码（域名改成你自己的）\nif($_SERVER[&#x27;SERVER_NAME&#x27;]==&#x27;www.xiaoqy.com&#x27;)&#123;//chen added    $this-&gt;siteUrl = &#x27;http://www.xiaoqy.com&#x27;;    &#125;\n\n步骤四保存修改，体验成功的喜悦吧，还有就是希望对插件很懂的大牛做成插件，毕竟修改源码这种事情不太友好。\n","categories":["互联网"],"tags":["Typecho","域名"]},{"title":"U盘修复 Kali Linux grub引导","url":"/usb-repair-kali-linux-grub/","content":"U盘启动到live模式，打开终端。\nfdisk -l\n\n查看输出结果，然后根据文件类型和分区大小来判定 Linux 系统安装在哪块硬盘和安装的分区。\n挂载安装分区 &#x2F;dev&#x2F;sda3，sda3为Kali Linux所在分区\nmount /dev/sda3 /mnt\n\n挂载其他所需的目录（使用 –bind）\nmount --bind /dev /mnt/devmount --bind /proc /mnt/procmount --bind /sys /mnt/sys\n\nChroot 到硬盘上的 Linux 系统\nchroot /mnt\n\n安装&amp;更新 Grub\ngrub-install /dev/sdagrub-mkconfig -o /boot/grub/grub.cfg\n\n退出 chroot 环境\nexit\n\n卸载分区\numount /mnt/devumount /mnt/procumount /mnt/sysumount /mnt\n\nreboot重启，引导修复完成\n","categories":["系统运维"],"tags":["Linux","Grub"]},{"title":"VIM 分屏基本操作","url":"/vim-split-window-basics/","content":"横竖分屏打开新文件:sp filename:split filename:vsp filename:vsplit filename:sview filename  -&gt;只读分屏打开文件\n从命令行直接打开多个文件且是分屏vim -On file1, file2 ...  -&gt;垂直分屏vim -on file1, file2 ...  -&gt;水平分屏\n注：O垂直分屏，-o水平分屏，n表示分几个屏\n横&#x2F;竖分屏打开当前文件ctrl+W sctrl+W v\n切换分屏ctrl+w wctrl+w h,j,k,lctrl+w 上下左右键\n关闭分屏ctrl+W c 关闭当前窗口ctrl+w q 关闭当前窗口，若只有一个分屏且退出vim:only  仅保留当前分屏:hide  关闭当前分屏\n调整分屏的大小ctrl+w = 所有分屏都统一高度ctrl+w + 增加高度ctrl+w - 减少高度10 ctrl+w + 增加10行高度\n移动分屏ctrl+W H,J,K,L","categories":["系统运维"],"tags":["Linux","VIM"]},{"title":"网页安全保护","url":"/web-protection/","content":"/* 禁止文字拖拽 */body &#123;    -webkit-user-select: none; /* Safari */    -moz-user-select: none; /* Firefox */    -ms-user-select: none; /* IE10+ */    user-select: none; /* Standard */&#125;/* 禁止操作图片 */img &#123;    /* pointer-events: none; 禁用图片的鼠标/触摸事件 */    /* user-select: none; 禁止选中图片 */    -webkit-touch-callout: none; /* iOS 禁用长按菜单 */    /* -webkit-user-select: none; 禁止 iOS 选中 */    /* -moz-user-select: none; 禁止 Firefox 选中 */    /* -ms-user-select: none; 禁止 IE 选中 */&#125;/* 禁止图片拖拽 */img &#123;    -webkit-user-drag: none;    -khtml-user-drag: none;    -moz-user-drag: none;    -o-user-drag: none;    user-drag: none;&#125;\n\ndocument.onselectstart = function()&#123; return false; &#125;; // 禁止文字选择document.oncut = function()&#123; Swal.fire(&#123; position: &quot;top-end&quot;, icon: &quot;warning&quot;, title: &quot;本站禁止剪切！&quot;, timer: 2000, timerProgressBar: true, showConfirmButton: false &#125;); return false; &#125;; // 禁止剪切 document.oncopy = function()&#123; Swal.fire(&#123; position: &quot;top-end&quot;, icon: &quot;warning&quot;, title: &quot;本站禁止复制！&quot;, timer: 2000, timerProgressBar: true, showConfirmButton: false &#125;); return false; &#125;; // 禁止复制document.oncontextmenu = function()&#123; Swal.fire(&#123; position: &quot;top-end&quot;, icon: &quot;warning&quot;, title: &quot;本站禁止右键菜单！&quot;, timer: 2000, timerProgressBar: true, showConfirmButton: false &#125;); return false; &#125;; // 禁止右键菜单// 禁止图片拖拽document.querySelectorAll(&#x27;img&#x27;).forEach(img =&gt; &#123;  img.addEventListener(&#x27;dragstart&#x27;, function(e) &#123;    e.preventDefault();  &#125;);&#125;);// 禁止图片右键document.addEventListener(&#x27;contextmenu&#x27;, (event) =&gt; &#123;  if (event.target.tagName === &#x27;IMG&#x27;) &#123;      event.preventDefault();  &#125;&#125;);// 禁止长按图片document.addEventListener(&#x27;touchstart&#x27;, (event) =&gt; &#123;  if (event.target.tagName === &#x27;IMG&#x27;) &#123;      event.preventDefault(); // 阻止长按默认行为  &#125;&#125;, &#123; passive: false &#125;);// 复制版权内容document.addEventListener(&#x27;copy&#x27;, function (event) &#123;  let clipboardData = event.clipboardData || window.clipboardData;  if (!clipboardData) return;  let text = window.getSelection().toString();  if (text) &#123;    event.preventDefault();    let copyrightNotice = &#x27;\\r\\n\\r\\n------\\r\\n作者：Allen Shaw\\r\\n链接：&#x27; + window.location.href + &#x27;\\r\\n未经授权禁止转载或摘录，著作权归作者所有！\\r\\n商业转载请联系作者获得许可，非商业转载请注明出处并保留作者信息。&#x27;;    clipboardData.setData(&#x27;text/plain&#x27;, text + copyrightNotice);    // 如果想加富文本（HTML），可以加这一行    // clipboardData.setData(&#x27;text/html&#x27;, &#x27;&lt;p&gt;&#x27; + text + &#x27;&lt;/p&gt;&lt;p&gt;版权所有&lt;/p&gt;&#x27;);  &#125;&#125;);// 清空页面function clearHTML()&#123;  document.documentElement.innerHTML = &#x27;&#x27;;  window.location.href = &#x27;about:blank&#x27;;  window.addEventListener(&#x27;popstate&#x27;, function (event) &#123;    window.location.href = &#x27;about:blank&#x27;;  &#125;);&#125;document.addEventListener(&#x27;keydown&#x27;, function(event) &#123;  const isCtrl = event.ctrlKey;  const isShift = event.shiftKey;  const key = event.key;  if (event.key === &#x27;F12&#x27; || isCtrl &amp;&amp; isShift &amp;&amp; key === &#x27;I&#x27; || isCtrl &amp;&amp; isShift &amp;&amp; key === &#x27;C&#x27; || isCtrl &amp;&amp; isShift &amp;&amp; key === &#x27;J&#x27;) &#123;    event.preventDefault();    clearHTML();  &#125;  else if (isCtrl &amp;&amp; key === &#x27;s&#x27;) &#123;    event.preventDefault();    clearHTML();  &#125;  else if (isCtrl &amp;&amp; key === &#x27;p&#x27;) &#123;    event.preventDefault();    document.body.style.filter = &#x27;blur(5px)&#x27;;    setTimeout(() =&gt; &#123;      document.body.style.filter = &#x27;none&#x27;;    &#125;, 3000);  &#125;&#125;);// 检测开发者工具const threshold = 320;setInterval(() =&gt; &#123;    if (window.outerWidth - window.innerWidth &gt; threshold || window.outerHeight - window.innerHeight &gt; threshold) &#123;        document.documentElement.innerHTML = &#x27;&#x27;;        window.location.href = &#x27;about:blank&#x27;;        // document.write(&quot;&lt;style&gt;@media print&#123;body&#123;display:none&#125;&#125;&lt;/style&gt;&quot;);                // 初始状态        history.pushState(null, document.title, window.location.href);        // 监听popstate事件（用户点击了后退按钮）        window.addEventListener(&#x27;popstate&#x27;, function (event) &#123;          history.pushState(null, document.title, window.location.href = &#x27;about:blank&#x27;);        &#125;);        alert(&#x27;检测到开发者工具，请关闭！&#x27;);        document.body.style.filter = &#x27;blur(5px)&#x27;;    &#125;&#125;, 1000);"},{"title":"电脑上收看传统电视频道：potplayer + iptv 源","url":"/watch-tv-channels-on-pc-potplayer-iptv/","content":"电脑上收看传统电视频道：potplayer + iptv 源先上效果图：\n（图注：potplayer +iptv 源观看 CCTV。右侧播放列表可以切换电视频道）\n以下正文开始在电脑上收盘传统电视频道，推荐 potplayer + iptv源订阅的方式。 必备工具：\n\n支持播放 iptv 的视频播放器，推荐 potplayer 或 VLC\niptv 频道的网络地址\n\n必备工具的第 2 项，即电视频道的网络地址，不太容易获取。这里推荐 Github 上的开源项目：iptv-org&#x2F;iptv。 该项目包含了全球很多国家的 iptv 源，我们只需要找到其中的中国源，即 https://iptv-org.github.io/iptv/channels/cn.m3u\n\n把它下载到电脑上，下载后是这样一个文件：\n\n用 potplayer打开它，就可以收看电视了！效果就是文章开头那样。\n","categories":["应用软件"],"tags":["PotPlayer","iPTV","TV","电视","直播源"]},{"title":"WordPress – 站点底部显示站点运行时间","url":"/wordpress-display-site-uptime-footer/","content":"添加代码在主题页面的footer.php中的标签之前添加以下代码：\n&lt;div&gt;Powered by &lt;a href=&quot;https://xiaoqy.com&quot; target=&quot;_blank&quot;&gt;Cyrus Xiao&lt;/a&gt;&lt;/div&gt;    &lt;div&gt;本站已稳定运行：&lt;SPAN id=span_dt_dt style=&quot;color: #FFFFFF;&quot;&gt;&lt;/SPAN&gt; \t&lt;SCRIPT language=javascript&gt;function show_date_time()&#123;        window.setTimeout(&quot;show_date_time()&quot;, 1000);        BirthDay=new Date(&quot;10/31/2020 00:00:00&quot;);&lt;!-- 这里可以修改站点开始时间 --&gt;        today=new Date();        timeold=(today.getTime()-BirthDay.getTime());        sectimeold=timeold/1000        secondsold=Math.floor(sectimeold);        msPerDay=24*60*60*1000        e_daysold=timeold/msPerDay        daysold=Math.floor(e_daysold);        e_hrsold=(e_daysold-daysold)*24;        hrsold=Math.floor(e_hrsold);        e_minsold=(e_hrsold-hrsold)*60;        minsold=Math.floor((e_hrsold-hrsold)*60);        seconds=Math.floor((e_minsold-minsold)*60);        span_dt_dt.innerHTML=daysold+&#x27;天&#x27;+hrsold+&#x27;时&#x27;+minsold+&#x27;分&#x27;+seconds+&#x27;秒&#x27;;    &#125;    show_date_time();&lt;/script&gt;&lt;/div&gt;\n\n\n大致的运行效果如下\n\n\n","categories":["前端开发"],"tags":["WordPress","前端开发"]}]